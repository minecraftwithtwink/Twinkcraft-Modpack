{
	"credit": "By Ewan Howell, FreshLX, and ALtheGatorMC",
	"textureSize": [128, 96],
	"models": [
		{
			"part": "headwear",
			"id": "headwear",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"boxes": [
				{"coordinates": [-4, 24, -4, 8, 8, 8], "textureOffset": [0, 0]},
				{"coordinates": [-3, 24.75, -2.5, 6, 6, 5], "textureOffset": [0, 58], "sizeAdd": 0.5},
				{"coordinates": [-4, 24, -4, 8, 8, 8], "textureOffset": [32, 0], "sizeAdd": 0.51}
			],
			"submodels": [
				{
					"id": "shroom",
					"invertAxis": "xy",
					"translate": [-2, 35.5, 1],
					"rotate": [0, 45, 0],
					"boxes": [
						{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
					],
					"submodels": [
						{
							"id": "shroom_part",
							"invertAxis": "xy",
							"translate": [0, 0, 0],
							"rotate": [0, -90, 0],
							"boxes": [
								{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
							]
						}
					]
				},
				{
					"id": "head_armor",
					"invertAxis": "xy",
					"translate": [0, 24, 0],
					"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
					"boxes": [
						{"coordinates": [-4, 0, -4, 8, 8, 8], "textureOffset": [32, 0], "sizeAdd": 0.5}
					]
				}
			]
		},
		{
			"part": "head",
			"id": "head",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"animations": [
				{
					"head.rx": "torad(10) +sin((limb_swing/2+age)/60*pi*2-torad(90))/40 +(head_pitch/57.5)/1.4 +clamp(-torad(10)*(limb_speed*3), torad(-10), 0) -(sin(pi*2*swing_progress)/3)",
					"head.ry": "(head_yaw/57.5)/1.2 +sin((limb_swing/2+age)/4*pi*2)/80",
					"head.rz": "sin(limb_swing/1.5)/15*limb_speed/1.2 *limb_speed/1.2 +sin((limb_swing/2+age)/80*pi*2-torad(90))/20 +(head_yaw/57.5)/4 +sin((limb_swing/2+age)/4*pi*2)/80 +(sin(pi*swing_progress)/3)",
					"head.tx": "sin(limb_swing/1.5) *limb_speed/1.2 +sin((limb_swing/2+age)/80*pi*2)/if(is_in_lava||is_riding, 2, 1.2)    +(sin(pi*swing_progress)*3)",
					"head.ty": "0.5 +sin((limb_swing/2+age)/60* pi*2)/4 +(0.8*limb_speed) +sin(torad(135)+limb_swing/0.75)*1.5*limb_speed +(sin(pi*swing_progress)*2)",
					"head.tz": "sin((limb_swing/2+age)/60*-pi*2)/4 -1.8 +(sin(-pi*swing_progress)*4)",
					"headwear.rx": "head.rx",
					"headwear.ry": "head.ry",
					"headwear.rz": "head.rz",
					"headwear.tx": "head.tx",
					"headwear.ty": "head.ty",
					"headwear.tz": "head.tz",
					"body.rx": "if(left_arm.ry>=torad(10)||right_arm.ry<=torad(-10), 0, torad(10)) +sin((limb_swing/2+age)/60*pi*2)/40 +clamp(torad(5)*limb_speed, torad(-45), torad(50)) +(sin(pi*swing_progress)/3)",
					"body.ry": "if(left_arm.ry>=torad(10), torad(-70), right_arm.ry<=torad(-10), torad(70), if(is_riding, 0, clamp(torad(-13)+limb_speed, torad(-13), if(right_arm.rx<torad(-50), torad(13), 0)) )) +sin(torad(180)+limb_swing/1.5)/3*limb_speed +(head_yaw/57.5)/6 +(sin(-pi*swing_progress))",
					"body.rz": "head.rz +if(is_riding, 0, clamp(torad(-2)+limb_speed, torad(-2), if(right_arm.rx<torad(-50), torad(2), 0)) ) +sin((limb_swing/2+age)/80*pi*2)/40 -sin((limb_swing/2+age)/80*pi*2-torad(90))/20 -(head_yaw/57.5)/4 -sin((limb_swing/2+age)/4*pi*2)/80 -(sin(pi*swing_progress)/3)",
					"body.tx": "head.tx",
					"body.ty": "head.ty +if(is_in_lava, -sin((limb_swing/2+age)/60* pi*2)/4, 0)",
					"body.tz": "head.tz"
				},
				{
					"right_arm.rx": "if(is_in_lava&&right_arm.rx>torad(-80), torad(-20), is_riding&&right_arm.rx>torad(-80), torad( 20), right_arm.rx<torad(-80), if(body.ry<=torad(-60), torad(-100), body.ry>=torad(60), torad(-90 ), torad(-65) +sin(torad(180)+limb_swing/1.5)/4*limb_speed/1.2), sin(torad(180)+limb_swing/1.5)/4  *limb_speed +torad(25+(30*limb_speed))) +(head_yaw/57.5)/8 +sin((limb_swing/2+age)/60*pi*2-torad(60))/20 -(sin(pi*2*swing_progress))",
					"left_arm.rx": " if(is_in_lava&&right_arm.rx>torad(-80), torad(-20), is_riding&&right_arm.rx>torad(-80), torad(-35),  left_arm.rx<torad(-80), if(body.ry<=torad(-60), torad(-90 ), body.ry>=torad(60), torad(-100), torad(-40) +sin(torad( 0 )+limb_swing/1.5)/4*limb_speed/1.2), sin(torad( 0 )+limb_swing/1.5)/1.5*limb_speed                           ) -(head_yaw/57.5)/8 +sin((limb_swing/2+age)/60*pi*2-torad(60))/20 +(sin(pi*swing_progress)*2)",
					"right_arm.ry": "if(right_arm.ry<=torad(-20), torad(-20), right_arm.ry>=torad(-20), 0, right_arm.rx<torad(-50), torad( 20)*limb_speed, is_riding, torad(30), -sin(limb_swing/1.5)/10*limb_speed/1.2 +torad(10*limb_speed)                       ) +sin((limb_swing/2+age)/60*pi*2+torad(90))/20 +sin((limb_swing/2+age)/4*pi*2)/60 +(sin(-pi/2*swing_progress*2)/4)",
					"left_arm.ry": " if( left_arm.ry>=torad( 20), torad( 20),  left_arm.ry<=torad( 20), 0, right_arm.rx<torad(-50), torad(-20)*limb_speed, is_riding, torad( 0), -sin(limb_swing/1.5)/4 *limb_speed/1.2 +clamp(torad( 15)-limb_speed, 0, torad( 15))) +sin((limb_swing/2+age)/60*pi*2-torad(90))/20 +sin((limb_swing/2+age)/3*pi*2)/80",
					"right_arm.rz": "if(body.ry<=torad(-60), torad(-8), body.ry>=torad(60), torad(-5), if(is_in_water||is_in_lava, torad( 30), if(is_riding, torad(20), torad( 10)) +sin((limb_swing/2+age)/80*pi*2+torad(90))/20) +torad( 20)*limb_speed ) +if(right_arm.rx<torad(-50), 0, -sin(limb_swing/1.5)/6*limb_speed/1.2) -(head_pitch/57.5)/14 +(sin(-pi+torad(90)*swing_progress*2))",
					"left_arm.rz": " if(body.ry<=torad(-60), torad( 5), body.ry>=torad(60), torad( 8), if(is_in_water||is_in_lava, torad(-30), if(is_riding, torad( 5), torad(-10)) +sin((limb_swing/2+age)/80*pi*2+torad(90))/20) +torad(-20)*limb_speed ) +if(right_arm.rx<torad(-50), 0, -sin(limb_swing/1.5)/6*limb_speed/1.2) +(head_pitch/57.5)/14 -(sin(pi*swing_progress))",
					"right_arm.tx": "if(body.ry<=torad(-60), -1, body.ry>=torad(60), -4, -5 +body.tx -(head_yaw/57.5)/2) +(sin(pi*swing_progress)*2)",
					"left_arm.tx": " if(body.ry<=torad(-60),  4, body.ry>=torad(60),  1,  5 +body.tx +(head_yaw/57.5)/2) -(sin(pi*swing_progress)*2)",
					"right_arm.ty": "if(body.ry<=torad(-60)||body.ry>=torad(60), 2, if(is_in_lava, 1, 2.5) +sin((limb_swing/2+age)/60*pi*2-torad(60))/5) +body.ty",
					"left_arm.ty": " if(body.ry<=torad(-60)||body.ry>=torad(60), 2, if(is_in_lava, 1, 2.5) +sin((limb_swing/2+age)/60*pi*2-torad(60))/5) +body.ty",
					"right_arm.tz": "if(body.ry<=torad(-30), -6, body.ry>=torad(30), -2.3, -1.8 +if(is_riding, 0, clamp(-1+limb_speed*2, -1, if(right_arm.rx<torad(-50),  1, 0)) ) +sin(torad(135)+limb_swing/1.5)*2*limb_speed/1.2 +sin((limb_swing/2+age)/60*-pi*2)/4 +(head_yaw/57.5)) -(sin(pi*swing_progress)*6)",
					"left_arm.tz": " if(body.ry<=torad(-30), -1, body.ry>=torad(30), -6  , -1.8 +if(is_riding, 0, clamp( 1-limb_speed*2,  if(right_arm.rx<torad(-50), -1, 0), 1) ) +sin(torad(-45)+limb_swing/1.5)*2*limb_speed/1.2 +sin((limb_swing/2+age)/60*-pi*2)/4 -(head_yaw/57.5))"
				},
				{
					"right_leg.rx": "if(is_riding, right_leg.rx, if(body.ry<=torad(-30)||body.ry>=torad(30), 0, clamp(torad(-5 )+limb_speed, torad(-5 ), 0) +clamp(sin(torad( 0 )+limb_swing/1.5)/6 +sin(torad( 0 )+limb_swing/1.5)/1.5*limb_speed/1.2 +torad(10)*limb_speed, torad(-60), torad(60))) +sin((limb_swing/2+age)/60*pi*2)/40) -(head_yaw/57.5)/30",
					"left_leg.rx": " if(is_riding,  left_leg.rx, if(body.ry<=torad(-30)||body.ry>=torad(30), 0, clamp(torad( 5 )-limb_speed, 0, torad( 5 )) +clamp(sin(torad(180)+limb_swing/1.5)/6 +sin(torad(180)+limb_swing/1.5)/1.5*limb_speed/1.2 +torad(10)*limb_speed, torad(-60), torad(60))) +sin((limb_swing/2+age)/60*pi*2)/40) +(head_yaw/57.5)/30",
					"right_leg.ry": "if(body.ry<=torad(-30), torad(-10 +if(is_riding,  20, 0)), body.ry>=torad(30), torad(60), if(is_riding, right_leg.ry, clamp(torad( 5 )-limb_speed, 0, torad( 5 )) +torad( 5)) ) +sin((limb_swing/2+age)/4*pi*2)/if(is_in_lava||is_riding, 120, 40)",
					"left_leg.ry": " if(body.ry<=torad(-30), torad(-60 +if(is_riding, - 0, 0)), body.ry>=torad(30), torad(10 +if(is_riding, -20, 0)), if(is_riding,  left_leg.ry, clamp(torad(-10)+limb_speed, torad(-10), 0) +torad(-5)) ) +sin((limb_swing/2+age)/4*pi*2)/if(is_in_lava||is_riding, 120, 40)",
					"right_leg.rz": "if(is_riding, right_leg.rz, clamp(torad( 3 )-limb_speed, 0, torad( 3 )) +torad( 2) +if(body.ry<=torad(-30)||body.ry>=torad(30), clamp(sin(torad( 0 )+limb_swing/1.3)/6 +sin(torad( 0 )+limb_swing/1.3)/1.5*limb_speed +torad(10)*limb_speed, torad(-60), torad(60)), 0)) +if(is_in_lava||is_riding, 0, sin((limb_swing/2+age)/80*pi*2)/24)",
					"left_leg.rz": " if(is_riding,  left_leg.rz, clamp(torad(-3 )+limb_speed, torad(-3 ), 0) +torad(-2) +if(body.ry<=torad(-30)||body.ry>=torad(30), clamp(sin(torad(180)+limb_swing/1.3)/6 +sin(torad(180)+limb_swing/1.3)/1.5*limb_speed +torad(10)*limb_speed, torad(-60), torad(60)), 0)) +if(is_in_lava||is_riding, 0, sin((limb_swing/2+age)/80*pi*2)/24)",
					"right_leg.tx": "if(body.ry<=torad(-30)||body.ry>=torad(30), -0.5 +if(is_riding, -3, 0), -2) +if(body.ry<=torad(-30)||body.ry>=torad(30), 0, -sin((limb_swing/2+age)/60*pi*2)/10 +sin(torad(180)+limb_swing/1.5)*limb_speed) +if(is_in_lava||is_riding, 0, sin((limb_swing/2+age)/80*pi*2)/2)",
					"left_leg.tx": " if(body.ry<=torad(-30)||body.ry>=torad(30),  0.5 +if(is_riding, -3, 0),  2) +if(body.ry<=torad(-30)||body.ry>=torad(30), 0,  sin((limb_swing/2+age)/60*pi*2)/10 +sin(torad(180)+limb_swing/1.5)*limb_speed) +if(is_in_lava||is_riding, 0, sin((limb_swing/2+age)/80*pi*2)/2)",
					"right_leg.ty": "if(body.ry<=torad(-30)||body.ry>=torad(30), 12.2 +if(is_riding, 1, 0), 0.2 +clamp(12 +sin(torad( 90)+limb_swing/1.5)*4*limb_speed/1.2 +limb_speed, 0, 12.2))",
					"left_leg.ty": " if(body.ry<=torad(-30)||body.ry>=torad(30), 12.2 +if(is_riding, 1, 0), 0.2 +clamp(12 +sin(torad(-90)+limb_swing/1.5)*4*limb_speed/1.2 +limb_speed, 0, 12.2))",
					"right_leg.tz": "if(body.ry<=torad(-30), -2 +if(is_riding, -2, 0), body.ry>=torad(30),  2 +if(is_riding, -2, 0), if(is_riding, 0, clamp(-0.4+limb_speed/2, -0.4, if(right_arm.rx<torad(-50),  0.4, 0)) ) +clamp((sin(torad( 90)+limb_swing/1.5)*5)*limb_speed/1.2 +(1.5*limb_speed), -6, 1           ) -0.2) +if(is_riding, 0, sin((limb_swing/2+age)/60*pi*2+torad(180))/3) +(head_yaw/57.5)/2",
					"left_leg.tz": " if(body.ry<=torad(-30),  2 +if(is_riding, -2, 0), body.ry>=torad(30), -2 +if(is_riding, -2, 0), if(is_riding, 0, clamp( 0.4-limb_speed/2,  if(right_arm.rx<torad(-50), -0.4, 0), 0.4) ) +clamp((sin(torad(-90)+limb_swing/1.5)*5)*limb_speed/1.2 +(1.5*limb_speed), -6, 1) -0.2) +if(is_riding, 0, sin((limb_swing/2+age)/60*pi*2+torad(180))/3) -(head_yaw/57.5)/2"
				},
				{
					"translate.ty": "if(death_time > 0 && !is_in_water, frac(pos_y) * 16, 0)",
					"rotate.rz": "if(death_time > 0, -torad(min(sqrt((death_time - 1) / 20 * 1.6), 1) * 90), 0)",
					"render.shadow_opacity": "if(death_time == 0, 1, (20 - death_time) / 20)",
					"render.shadow_size": 0.5
				},
				{
					"var.deltatime": "frame_time * 20",
					"var.a": "if(is_in_water, 0.1, 1)"
				},
				{
					"var.position_check_head_y": "var.position_head_y + var.velocity_head_tyz * sin(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_check_head_z": "var.position_head_z + var.velocity_head_tyz * cos(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_check_left_arm_y": "var.position_left_arm_y + var.velocity_left_arm_tyz * sin(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.position_check_left_arm_z": "var.position_left_arm_z + var.velocity_left_arm_tyz * cos(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.position_check_right_arm_y": "var.position_right_arm_y + var.velocity_right_arm_tyz * sin(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.position_check_right_arm_z": "var.position_right_arm_z + var.velocity_right_arm_tyz * cos(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.position_check_left_leg_y": "var.position_left_leg_y + var.velocity_left_leg_tyz * sin(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.position_check_left_leg_z": "var.position_left_leg_z + var.velocity_left_leg_tyz * cos(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.position_check_right_leg_y": "var.position_right_leg_y + var.velocity_right_leg_tyz * sin(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime",
					"var.position_check_right_leg_z": "var.position_right_leg_z + var.velocity_right_leg_tyz * cos(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime"
				},
				{
					"var.floor_head": "if(is_in_water || sqrt(var.position_check_head_y * var.position_check_head_y + var.position_check_head_z * var.position_check_head_z) * sin(-head2.rx + atan2(var.position_check_head_y, var.position_check_head_z)) <= 20 + 4 * sin(head2.rx + pi / 2), 1, 0.5)",
					"var.floor_body": "if(is_in_water || var.position_body_y + var.velocity_body_ty * var.deltatime <= 14, 1, 0.5)",
					"var.floor_left_arm": "if(is_in_water || sqrt(var.position_check_left_arm_y * var.position_check_left_arm_y + var.position_check_left_arm_z * var.position_check_left_arm_z) * sin(-left_arm2.rx + atan2(var.position_check_left_arm_y, var.position_check_left_arm_z)) <= 20 + -6 * sin(left_arm2.rx + pi / 2), 1, 0.5)",
					"var.floor_right_arm": "if(is_in_water || sqrt(var.position_check_right_arm_y * var.position_check_right_arm_y + var.position_check_right_arm_z * var.position_check_right_arm_z) * sin(-right_arm2.rx + atan2(var.position_check_right_arm_y, var.position_check_right_arm_z)) <= 20 + -6 * sin(right_arm2.rx + pi / 2), 1, 0.5)",
					"var.floor_left_leg": "if(is_in_water || sqrt(var.position_check_left_leg_y * var.position_check_left_leg_y + var.position_check_left_leg_z * var.position_check_left_leg_z) * sin(-left_leg2.rx + atan2(var.position_check_left_leg_y, var.position_check_left_leg_z)) <= 8 + -6 * sin(left_leg2.rx + pi / 2), 1, 0.5)",
					"var.floor_right_leg": "if(is_in_water || sqrt(var.position_check_right_leg_y * var.position_check_right_leg_y + var.position_check_right_leg_z * var.position_check_right_leg_z) * sin(-right_leg2.rx + atan2(var.position_check_right_leg_y, var.position_check_right_leg_z)) <= 8 + -6 * sin(right_leg2.rx + pi / 2), 1, 0.5)"
				},
				{
					"var.velocity_head_tx": "if(death_time > 0, var.floor_head * var.velocity_head_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_head_ty": "if(death_time > 0, if(var.floor_head == 1, 1, -var.floor_head) * var.velocity_head_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_head_tz": "if(death_time > 0, var.floor_head * var.velocity_head_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_head_rx": "if(death_time > 0, var.floor_head * var.velocity_head_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_head_ry": "if(death_time > 0, var.floor_head * var.velocity_head_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_head_tyz": "sqrt(var.velocity_head_ty * var.velocity_head_ty + var.velocity_head_tz * var.velocity_head_tz)",
					"var.velocity_angle_head": "atan2(var.velocity_head_ty, var.velocity_head_tz)"
				},
				{
					"var.position_head_x": "var.position_head_x + var.velocity_head_tx * var.deltatime",
					"var.position_head_y": "var.position_head_y + var.velocity_head_tyz * sin(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_head_z": "var.position_head_z + var.velocity_head_tyz * cos(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.rotation_head_x": "var.rotation_head_x + var.velocity_head_rx * var.deltatime",
					"var.rotation_head_y": "var.rotation_head_y + var.velocity_head_ry * var.deltatime"
				},
				{
					"physics_head.tx": "var.position_head_x",
					"physics_head.ty": "-4 + var.position_head_y",
					"physics_head.tz": "var.position_head_z",
					"physics_head.rx": "var.rotation_head_x",
					"physics_head.ry": "var.rotation_head_y"
				},
				{
					"var.velocity_body_tx": "if(death_time > 0, var.floor_body * var.velocity_body_tx - var.first_frame * (random() -0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_body_ty": "if(death_time > 0, if(var.floor_body == 1, 1, -var.floor_body) * var.velocity_body_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_body_tz": "if(death_time > 0, var.floor_body * var.velocity_body_tz - var.first_frame * (random() -0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_body_rx": "if(death_time > 0, var.floor_body * var.velocity_body_rx - var.first_frame * (random() -0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_body_ry": "if(death_time > 0, var.floor_body * var.velocity_body_ry - var.first_frame * (random() -0.5) * if(is_in_water, 0.5, 1), 0)"
				},
				{
					"var.position_body_x": "var.position_body_x + var.velocity_body_tx * var.deltatime",
					"var.position_body_y": "var.position_body_y + var.velocity_body_ty * var.deltatime",
					"var.position_body_z": "var.position_body_z + var.velocity_body_tz * var.deltatime",
					"var.rotation_body_x": "var.rotation_body_x + var.velocity_body_rx * var.deltatime",
					"var.rotation_body_y": "var.rotation_body_y + var.velocity_body_ry * var.deltatime"
				},
				{
					"physics_body.tx": "var.position_body_x",
					"physics_body.ty": "-18 + var.position_body_y",
					"physics_body.tz": "var.position_body_z",
					"physics_body.rx": "var.rotation_body_x",
					"physics_body.ry": "var.rotation_body_y"
				},
				{
					"var.velocity_left_arm_tx": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_arm_ty": "if(death_time > 0, if(var.floor_left_arm == 1, 1, -var.floor_left_arm) * var.velocity_left_arm_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_left_arm_tz": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_arm_rx": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_arm_ry": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_arm_tyz": "sqrt(var.velocity_left_arm_ty * var.velocity_left_arm_ty + var.velocity_left_arm_tz * var.velocity_left_arm_tz)",
					"var.velocity_angle_left_arm": "atan2(var.velocity_left_arm_ty, var.velocity_left_arm_tz)"
				},
				{
					"var.position_left_arm_x": "var.position_left_arm_x + var.velocity_left_arm_tx * var.deltatime",
					"var.position_left_arm_y": "var.position_left_arm_y + var.velocity_left_arm_tyz * sin(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.position_left_arm_z": "var.position_left_arm_z + var.velocity_left_arm_tyz * cos(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.rotation_left_arm_x": "var.rotation_left_arm_x + var.velocity_left_arm_rx * var.deltatime",
					"var.rotation_left_arm_y": "var.rotation_left_arm_y + var.velocity_left_arm_ry * var.deltatime"
				},
				{
					"physics_left_arm.tx": "var.position_left_arm_x",
					"physics_left_arm.ty": "4 + var.position_left_arm_y",
					"physics_left_arm.tz": "var.position_left_arm_z",
					"physics_left_arm.rx": "var.rotation_left_arm_x",
					"physics_left_arm.ry": "var.rotation_left_arm_y"
				},
				{
					"var.velocity_right_arm_tx": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_arm_ty": "if(death_time > 0, if(var.floor_right_arm == 1, 1, -var.floor_right_arm) * var.velocity_right_arm_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_right_arm_tz": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_arm_rx": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_arm_ry": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_arm_tyz": "sqrt(var.velocity_right_arm_ty * var.velocity_right_arm_ty + var.velocity_right_arm_tz * var.velocity_right_arm_tz)",
					"var.velocity_angle_right_arm": "atan2(var.velocity_right_arm_ty, var.velocity_right_arm_tz)"
				},
				{
					"var.position_right_arm_x": "var.position_right_arm_x + var.velocity_right_arm_tx * var.deltatime",
					"var.position_right_arm_y": "var.position_right_arm_y + var.velocity_right_arm_tyz * sin(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.position_right_arm_z": "var.position_right_arm_z + var.velocity_right_arm_tyz * cos(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.rotation_right_arm_x": "var.rotation_right_arm_x + var.velocity_right_arm_rx * var.deltatime",
					"var.rotation_right_arm_y": "var.rotation_right_arm_y + var.velocity_right_arm_ry * var.deltatime"
				},
				{
					"physics_right_arm.tx": "var.position_right_arm_x",
					"physics_right_arm.ty": "4 + var.position_right_arm_y",
					"physics_right_arm.tz": "var.position_right_arm_z",
					"physics_right_arm.rx": "var.rotation_right_arm_x",
					"physics_right_arm.ry": "var.rotation_right_arm_y"
				},
				{
					"var.velocity_left_leg_tx": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_leg_ty": "if(death_time > 0, if(var.floor_left_leg == 1, 1, -var.floor_left_leg) * var.velocity_left_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_left_leg_tz": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_leg_rx": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_leg_ry": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_leg_tyz": "sqrt(var.velocity_left_leg_ty * var.velocity_left_leg_ty + var.velocity_left_leg_tz * var.velocity_left_leg_tz)",
					"var.velocity_angle_left_leg": "atan2(var.velocity_left_leg_ty, var.velocity_left_leg_tz)"
				},
				{
					"var.position_left_leg_x": "var.position_left_leg_x + var.velocity_left_leg_tx * var.deltatime",
					"var.position_left_leg_y": "var.position_left_leg_y + var.velocity_left_leg_tyz * sin(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.position_left_leg_z": "var.position_left_leg_z + var.velocity_left_leg_tyz * cos(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.rotation_left_leg_x": "var.rotation_left_leg_x + var.velocity_left_leg_rx * var.deltatime",
					"var.rotation_left_leg_y": "var.rotation_left_leg_y + var.velocity_left_leg_ry * var.deltatime"
				},
				{
					"physics_left_leg.tx": "var.position_left_leg_x",
					"physics_left_leg.ty": "6 + var.position_left_leg_y",
					"physics_left_leg.tz": "var.position_left_leg_z",
					"physics_left_leg.rx": "var.rotation_left_leg_x",
					"physics_left_leg.ry": "var.rotation_left_leg_y"
				},
				{
					"var.velocity_right_leg_tx": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_leg_ty": "if(death_time > 0, if(var.floor_right_leg == 1, 1, -var.floor_right_leg) * var.velocity_right_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_right_leg_tz": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_leg_rx": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_leg_ry": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_leg_tyz": "sqrt(var.velocity_right_leg_ty * var.velocity_right_leg_ty + var.velocity_right_leg_tz * var.velocity_right_leg_tz)",
					"var.velocity_angle_right_leg": "atan2(var.velocity_right_leg_ty, var.velocity_right_leg_tz)"
				},
				{
					"var.position_right_leg_x": "var.position_right_leg_x + var.velocity_right_leg_tx * var.deltatime",
					"var.position_right_leg_y": "var.position_right_leg_y + var.velocity_right_leg_tyz * sin(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime",
					"var.position_right_leg_z": "var.position_right_leg_z + var.velocity_right_leg_tyz * cos(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime",
					"var.rotation_right_leg_x": "var.rotation_right_leg_x + var.velocity_right_leg_rx * var.deltatime",
					"var.rotation_right_leg_y": "var.rotation_right_leg_y + var.velocity_right_leg_ry * var.deltatime"
				},
				{
					"physics_right_leg.tx": "var.position_right_leg_x",
					"physics_right_leg.ty": "6 + var.position_right_leg_y",
					"physics_right_leg.tz": "var.position_right_leg_z",
					"physics_right_leg.rx": "var.rotation_right_leg_x",
					"physics_right_leg.ry": "var.rotation_right_leg_y"
				},
				{
					"var.first_frame": "if(death_time > 0, 0, 1)"
				},
				{
					"var.by_ewan_howell": 0
				},
				{
					"body_dead.visible": "!is_alive",
					"body_alive.visible": "is_alive",
					"headwear.visible": "is_alive",
					"left_arm.visible": "is_alive",
					"right_arm.visible": "is_alive",
					"left_leg.visible": "is_alive",
					"right_leg.visible": "is_alive"
				},
				{
					"body_armor.ty": "sin(limb_swing*1.5)*limb_speed*0.7",
					"sheath_y.ty": "body_armor.ty*1.25"
				}
			]
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"submodels": [
				{
					"id": "body_alive",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"boxes": [
						{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [16, 16]}
					],
					"submodels": [
						{
							"id": "body_armor",
							"invertAxis": "xy",
							"translate": [0, 0, 0],
							"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
							"boxes": [
								{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [0, 41], "sizeAdd": 0.3}
							],
							"submodels": [
								{
									"id": "sheath_y",
									"invertAxis": "xy",
									"translate": [0, 0, 0],
									"submodels": [
										{
											"id": "sheath",
											"invertAxis": "xy",
											"translate": [0, 0, 0],
											"rotate": [0, -90, 0],
											"submodels": [
												{
													"id": "sheath_part",
													"invertAxis": "xy",
													"translate": [-0.75, 13.5, 4.025],
													"rotate": [0, 0, 42.5],
													"boxes": [
														{"coordinates": [-2, -6.5, -0.499, 4, 11, 2], "textureOffset": [49, 19]}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"id": "body_dead",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"submodels": [
						{
							"id": "rotate",
							"invertAxis": "xy",
							"translate": [0, 0, 0],
							"submodels": [
								{
									"id": "translate",
									"invertAxis": "xy",
									"translate": [0, 0, 0],
									"submodels": [
										{
											"id": "physics_body",
											"invertAxis": "xy",
											"translate": [0, 18, 0],
											"boxes": [
												{"coordinates": [-4, -6, -2, 8, 12, 4], "textureOffset": [16, 16]}
											],
											"submodels": [
												{
													"id": "body_armor2",
													"invertAxis": "xy",
													"translate": [0, -18, 0],
													"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
													"boxes": [
														{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [0, 41], "sizeAdd": 0.3}
													],
													"submodels": [
														{
															"id": "sheath2",
															"invertAxis": "xy",
															"translate": [0, 0, 0],
															"rotate": [0, -90, 0],
															"submodels": [
																{
																	"id": "sheath_part2",
																	"invertAxis": "xy",
																	"translate": [-0.75, 13.5, 4.025],
																	"rotate": [0, 0, 42.5],
																	"boxes": [
																		{"coordinates": [-2, -6.5, -0.499, 4, 11, 2], "textureOffset": [49, 19]}
																	]
																}
															]
														}
													]
												}
											]
										},
										{
											"id": "head2",
											"invertAxis": "xy",
											"translate": [0, 24, 0],
											"submodels": [
												{
													"id": "physics_head",
													"invertAxis": "xy",
													"translate": [0, 4, 0],
													"boxes": [
														{"coordinates": [-4, -4, -4, 8, 8, 8], "textureOffset": [0, 0]},
														{"coordinates": [-3, -3.25, -2.5, 6, 6, 5], "textureOffset": [0, 58], "sizeAdd": 0.5},
														{"coordinates": [-4, -4, -4, 8, 8, 8], "textureOffset": [32, 0], "sizeAdd": 0.51}
													],
													"submodels": [
														{
															"id": "shroom2",
															"invertAxis": "xy",
															"translate": [-2, 7.5, 1],
															"rotate": [0, 45, 0],
															"boxes": [
																{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
															],
															"submodels": [
																{
																	"id": "shroom_part2",
																	"invertAxis": "xy",
																	"translate": [0, 0, 0],
																	"rotate": [0, -90, 0],
																	"boxes": [
																		{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
																	]
																}
															]
														},
														{
															"id": "head_armor2",
															"invertAxis": "xy",
															"translate": [0, -4, 0],
															"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
															"boxes": [
																{"coordinates": [-4, 0, -4, 8, 8, 8], "textureOffset": [32, 0], "sizeAdd": 0.5}
															]
														}
													]
												}
											]
										},
										{
											"id": "left_arm2",
											"invertAxis": "xy",
											"mirrorTexture": "u",
											"translate": [-5, 22, 0],
											"submodels": [
												{
													"id": "physics_left_arm",
													"invertAxis": "xy",
													"mirrorTexture": "u",
													"translate": [0, -4, 0],
													"boxes": [
														{"coordinates": [-1, -6, -1, 2, 12, 2], "textureOffset": [40, 16]}
													],
													"submodels": [
														{
															"id": "left_arm_armor2",
															"invertAxis": "xy",
															"mirrorTexture": "u",
															"translate": [0, 4, 0],
															"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
															"boxes": [
																{"coordinates": [-1.99, -9.9, -2, 3, 12, 4], "textureOffset": [24, 32]}
															]
														}
													]
												}
											]
										},
										{
											"id": "right_arm2",
											"invertAxis": "xy",
											"translate": [5, 22, 0],
											"submodels": [
												{
													"id": "physics_right_arm",
													"invertAxis": "xy",
													"translate": [0, -4, 0],
													"boxes": [
														{"coordinates": [-1, -6, -1, 2, 12, 2], "textureOffset": [40, 16]}
													],
													"submodels": [
														{
															"id": "right_arm_armor2",
															"invertAxis": "xy",
															"translate": [0, 4, 0],
															"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
															"boxes": [
																{"coordinates": [-1.01, -9.9, -2, 3, 12, 4], "textureOffset": [38, 32]}
															]
														}
													]
												}
											]
										},
										{
											"id": "left_leg2",
											"invertAxis": "xy",
											"mirrorTexture": "u",
											"translate": [-2, 12, 0.1],
											"submodels": [
												{
													"id": "physics_left_leg",
													"invertAxis": "xy",
													"mirrorTexture": "u",
													"translate": [0, -6, -0.1],
													"boxes": [
														{"coordinates": [-1, -6, -1, 2, 12, 2], "textureOffset": [0, 16]}
													]
												}
											]
										},
										{
											"id": "right_leg2",
											"invertAxis": "xy",
											"translate": [2, 12, 0.1],
											"submodels": [
												{
													"id": "physics_right_leg",
													"invertAxis": "xy",
													"translate": [0, -6, -0.1],
													"boxes": [
														{"coordinates": [-1, -6, -1, 2, 12, 2], "textureOffset": [0, 16]}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"mirrorTexture": "u",
			"translate": [5, -22, 0],
			"boxes": [
				{"coordinates": [-6, 12, -1, 2, 12, 2], "textureOffset": [40, 16]}
			],
			"submodels": [
				{
					"id": "left_arm_armor",
					"invertAxis": "xy",
					"mirrorTexture": "u",
					"translate": [-5, 22, 0],
					"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
					"boxes": [
						{"coordinates": [-1.99, -9.9, -2, 3, 12, 4], "textureOffset": [24, 32]}
					]
				}
			]
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [-5, -22, 0],
			"boxes": [
				{"coordinates": [4, 12, -1, 2, 12, 2], "textureOffset": [40, 16]}
			],
			"submodels": [
				{
					"id": "right_arm_armor",
					"invertAxis": "xy",
					"translate": [5, 22, 0],
					"texture": "textures/entity/skeleton/wither_skeleton_armor.png",
					"boxes": [
						{"coordinates": [-1.01, -9.9, -2, 3, 12, 4], "textureOffset": [38, 32]}
					]
				}
			]
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"mirrorTexture": "u",
			"translate": [2, -12, -0.1],
			"boxes": [
				{"coordinates": [-3, 0, -1, 2, 12, 2], "textureOffset": [0, 16]}
			]
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [-2, -12, -0.1],
			"boxes": [
				{"coordinates": [1, 0, -1, 2, 12, 2], "textureOffset": [0, 16]}
			]
		},
		{
			"part": "headwear",
			"id": "headwear",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		}
	]
}