{
	"credit": "Made with Blockbench",
	"textureSize": [64, 128],
	"models": [
		{
			"part": "head",
			"id": "head",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"submodels": [
				{
					"id": "Created_by_FreshLX_for_Fresh_Animations",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				}
			],
			"animations": [
				{
					"var.testing": "0",
					"var.count_aggro": "clamp(if(is_aggressive                         , min(40, var.count_aggro +0.1 *frame_time*40), max(0, var.count_aggro -0.1 *frame_time*40)), 0, 1)",
					"var.count_swim": " clamp(if(!is_riding&&!is_on_ground&&is_in_water, min(40, var.count_swim  +0.1 *frame_time*40), max(0, var.count_swim  -0.1 *frame_time*40)), 0, 1)",
					"var.r": "(pi*random(id)*2) + (limb_swing/20)*0",
					"var.b": "age /(11 -random(id)*2)",
					"var.ls": "limb_swing/if( limb_speed>0.5, 1.6, 1.1 )",
					"var.swim": "limb_swing/2 +age/4",
					"var.ws": "clamp(limb_speed*6, 0, 1)*clamp(2-limb_speed*3, 0, 1)",
					"var.run": "clamp(if(limb_speed>0.5, min(20, var.run +0.1 *frame_time*20), max(0, var.run -0.1 *frame_time*20)), 0, 1)",
					"var.walk": "clamp(1-var.run, 0, 1)",
					"var.ylook": "clamp(sin(var.r+age/60)*6, 0, 1)*1.2",
					"var.melee": "if(is_aggressive&&!is_in_water, if(left_arm.rx>torad(-60)&&right_arm.rx-sin(swing_progress*pi)*2<torad(-90), -1, left_arm.rx-sin(swing_progress*pi)*2<torad(-90), 1, -1), 0)",
					"var.fold": "if(is_riding||is_in_water&&!is_on_ground||limb_speed>1, 0, clamp(20 +sin(var.r +age/200)*30, 0, 1-var.count_aggro)) +clamp(sin(time/16)*2, 0, 1)*0",
					"var.pose": "if(is_riding||is_in_water&&!is_on_ground, 0, clamp(1-var.fold-limb_speed*4, 0, 1))*clamp(random(id)+0.3, 0.3, 1)",
					"var.nov1": "if(is_aggressive, 0, clamp(-5.6 +cos(-pi/6 +var.r +age/80)*6, 0, 1))*clamp(2-limb_speed*4, 0, 1)",
					"var.nov2": "clamp(-39 +cos(-pi/4 +var.r +var.b/20)*40, 0, 1)*clamp(1-limb_speed*2, 0, 1)"
				},
				{
					"head.rx": "-sin(pi*2*swing_progress)/5 +torad(head_pitch)/1.5 +sin(var.ls*2)/20*limb_speed +if(is_aggressive, torad(-5)*random(id), 0) +if(!is_riding&&!is_on_ground&&is_in_water, cos(var.swim*2)/30 +torad(-10) +torad(10*clamp(limb_speed*8, 0, 1)), 0) +(-torad(15 +7*random(id))*clamp(sin(limb_speed*3), 0, 1) )*var.fold +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b))/4 -torad(10) )*var.nov2 +(sin(limb_swing/2)/4 +torad(20))*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"head.ry": "-sin(pi*swing_progress)/6*var.melee +torad(head_yaw)/if(is_aggressive, 1.2, 1.8 -0.5*var.ylook) +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/6 *var.nov1",
					"head.rz": "-sin(pi*swing_progress)/6*var.melee                                                             +sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 +cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"head.tx": "-sin(pi*swing_progress)  *var.melee +sin(torad(45)+var.ls)/3*limb_speed",
					"head.ty": " sin(pi*swing_progress)*2 +if(!is_riding&&!is_on_ground&&is_in_water, -sin(var.swim*2)/2          , 0.3) +14*var.count_swim +limb_speed*var.ws -sin(torad(if(limb_speed>0.5, -45, 45))+var.ls*2)*limb_speed +sin(var.r +var.b)/6 +( cos(var.r+var.b +sin(var.r+var.b)*1.5)/2 +0.5 )*var.nov2",
					"head.tz": "                           if(!is_riding&&!is_on_ground&&is_in_water, -1*clamp(limb_speed*8, 0, 1), (-2.5*limb_speed) -sin(var.r +var.b)/6 -cos(var.ls*2)/2*clamp(limb_speed*3, 0, 1) +if(is_aggressive, 1.5*random(id), 0) -sin(pi*swing_progress)*if(var.melee!=0, 4, 2) -sin(pi*swing_progress) +(0.5 +clamp(-1+limb_speed*2, 0, 1))*var.fold ) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"nose.ty": "head.ty*var.testing",
					"body.rx": "         if(!is_riding&&!is_on_ground&&is_in_water, torad(20          *clamp(limb_speed*8, 0, 1)), sin(var.r +var.b)/60 +cos(var.ls*2)/18*limb_speed +torad(15)*limb_speed*(1-var.fold) +torad(-2.5 -2.5*var.fold)*clamp(1-limb_speed*2, 0, 1)) +if(is_aggressive, torad(-10)*random(id), 0) +sin(pi*swing_progress)/2 +( cos(var.r+var.b +sin(var.r+var.b))/12 )*var.nov2 -(sin(limb_swing/2)/2 +torad(20))/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"body.ry": "         if(!is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/8                            , torad(-7.5)*var.pose -sin(var.ls)/4*limb_speed*clamp(1-var.fold-1+limb_speed*2, 0, 1) +torad(head_yaw)/6*clamp(1-limb_speed*2, 0, 1) +(torad(-20) +sin(pi*swing_progress) )*var.melee)",
					"body.rz": "head.rz +if(!is_riding&&!is_on_ground&&is_in_water, sin(var.swim  )/30*clamp(limb_speed*8, 0, 1) , 0) +((-sin(var.ls)/60 -torad(2))*limb_speed +sin(pi*swing_progress)/9)*var.melee -sin(var.r+age/10 +sin(var.r*2+age/5)/2)/20*var.nov1 -cos(limb_swing/3)/3*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"body.tx": "head.tx",
					"body.ty": "head.ty +(0.15*limb_speed) -cos(torad(if(limb_speed>0.5, -45, 45))+var.ls*2 +cos(var.ls*2)/2)/1.5*limb_speed",
					"body.tz": "head.tz +(1*limb_speed)",
					"nose.rx": "head.rx*var.testing",
					"nose.ry": "head.ry*var.testing",
					"nose.rz": "head.rz*var.testing",
					"nose.tx": "head.tx*var.testing",
					"nose.tz": "head.tz*var.testing"
				},
				{
					"right_arm.sx": "1-clamp(-0.5+var.fold*4, 0, 1)",
					"left_arm.sx": " right_arm.sx",
					"right_arm.sy": "right_arm.sx",
					"left_arm.sy": " right_arm.sx",
					"right_arm.sz": "right_arm.sx",
					"left_arm.sz": " right_arm.sx",
					"right_arm.rx": "if(!is_riding&&!is_on_ground&&is_in_water,      torad(-50) -cos(var.swim                 )/4*clamp(1-limb_speed*8, 0, 1) +(cos(var.swim +sin(var.swim)) +torad(30)                                            )*clamp(limb_speed*8, 0, 1), if(var.melee==-1, torad(-100 -30*clamp(limb_speed*1.5, 0, 1) )*var.count_aggro -torad(40)*random(id) +cos(var.ls +sin(var.ls*2)/3)/4*limb_speed,                                  if(is_riding, torad(-45), -sin(var.ls)*limb_speed +if(var.melee== 1, torad(-20)*limb_speed, 0) ) ) +torad(head_yaw)/8 +torad(-50)*sin(var.fold*2) ) +sin(pi*swing_progress)*if(var.melee==-1, 2.5, 1.5) +torad(-10)*var.pose +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*if(var.melee==-1, -0.7, 1)",
					"left_arm.rx": " if(!is_riding&&!is_on_ground&&is_in_water,      torad(-50) -cos(var.swim                 )/4*clamp(1-limb_speed*8, 0, 1) +(cos(var.swim +sin(var.swim)) +torad(30)                                            )*clamp(limb_speed*8, 0, 1), if(var.melee== 1, torad(-100 -30*clamp(limb_speed*1.5, 0, 1) )*var.count_aggro -torad(40)*random(id) +cos(var.ls +sin(var.ls*2)/3)/4*limb_speed,                                  if(is_riding, torad(-45),  sin(var.ls)*limb_speed +if(var.melee==-1, torad(-20)*limb_speed, 0) ) ) -torad(head_yaw)/8 +torad(-50)*sin(var.fold*2) ) +sin(pi*swing_progress)*if(var.melee==-1, 1.5, 2.5) +torad( 5 )*var.pose +( -sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)*if(var.melee== 1, -0.7, 1)",
					"right_arm.ry": "if(!is_riding&&!is_on_ground&&is_in_water,      torad( 30) -sin(var.swim +cos(var.swim)/4)  *clamp(1-limb_speed*8, 0, 1) +(torad( 5) +cos(pi/8 +var.swim +sin(var.swim)/2 )/2 +clamp(-sin(var.swim),-pi/2, 0) )*clamp(limb_speed*8, 0, 1), if(var.melee==-1, torad( 25) +clamp(torad(head_yaw),-pi/4, pi/2)                                     +sin(var.ls)/6*limb_speed, (-sin(var.ls -sin(var.ls)/2)/1.5*limb_speed)/if(var.melee== 1, 1, 2) +if(is_riding, -torad(20), 0) -torad(15)*clamp(limb_speed*4, 0, 1) ) +cos(var.r +var.b)/30 ) -sin(pi/2*swing_progress*2)/2*if(var.melee==-1, clamp(limb_speed*2, 1, 2), -1) +torad(-35)*var.pose",
					"left_arm.ry": " if(!is_riding&&!is_on_ground&&is_in_water,      torad(-30) +sin(var.swim +cos(var.swim)/4)  *clamp(1-limb_speed*8, 0, 1) +(torad(-5) -cos(pi/8 +var.swim +sin(var.swim)/2 )/2 +clamp( sin(var.swim), 0, pi/2) )*clamp(limb_speed*8, 0, 1), if(var.melee== 1, torad(-25) +clamp(torad(head_yaw),-pi/2, pi/4)                                     +sin(var.ls)/6*limb_speed, (-sin(var.ls +sin(var.ls)/2)/1.5*limb_speed)/if(var.melee==-1, 1, 2) +if(is_riding,  torad(20), 0) +torad(15)*clamp(limb_speed*4, 0, 1) ) -cos(var.r +var.b)/30 ) +sin(pi/2*swing_progress*2)/2*if(var.melee==-1, -1, clamp(limb_speed*2, 1, 2)) +torad( 20)*var.pose",
					"right_arm.rz": "if(!is_riding&&!is_on_ground&&is_in_water, -cos(var.swim)/2 +(torad( 20) +cos(var.swim)/2)  *clamp(  limb_speed*8, 0, 1)                                                                                                        , if(var.melee==-1, torad(-20)                                                                                                 , var.melee== 1, -sin(var.ls)/5*limb_speed, 0 ) ) -torad(head_pitch)/14 +if(var.melee==-1, sin(pi*swing_progress*2)/8                     , var.melee==1,  sin(pi*swing_progress)/2 +torad( 15)*random(id), 0) +torad(-20)*clamp(var.fold*4, 0, 1) +torad( 8 +2  *var.pose)",
					"left_arm.rz": " if(!is_riding&&!is_on_ground&&is_in_water,  cos(var.swim)/2 +(torad(-20) -cos(var.swim)/2)  *clamp(  limb_speed*8, 0, 1)                                                                                                        , if(var.melee== 1, torad( 20)                                                                                                 , var.melee==-1, -sin(var.ls)/5*limb_speed, 0 ) ) +torad(head_pitch)/14 +if(var.melee==-1,-sin(pi*swing_progress)/2 +torad(-15)*random(id), var.melee==1, -sin(pi*swing_progress*2)/8                     , 0) +torad( 20)*clamp(var.fold*4, 0, 1) +torad(-8 +0.5*var.pose)",
					"right_arm.tx": "body.tx -5.2 +if(!is_riding&&!is_on_ground&&is_in_water,  (0.5 -cos(-pi/8 +var.swim -sin(var.swim)/2 ) -clamp( sin(var.swim), 0, 1.5)              )*clamp(limb_speed*8, 0, 1), (-sin(var.ls)/2*limb_speed )*torad(head_yaw)*clamp(1-limb_speed*2, 0, 1) +if(var.melee==-1, -0.5,        var.melee== 1,  0.5 +sin(var.ls)*1.5*limb_speed, -0.3) ) +sin(pi*swing_progress)*if(var.melee==-1, 2, 0)",
					"left_arm.tx": " body.tx +5.2 +if(!is_riding&&!is_on_ground&&is_in_water, -(0.5 -cos(-pi/8 +var.swim -sin(var.swim)/2 ) -clamp( sin(var.swim), 0, 1.5)              )*clamp(limb_speed*8, 0, 1), ( sin(var.ls)/2*limb_speed )*torad(head_yaw)*clamp(1-limb_speed*2, 0, 1) +if(var.melee== 1,  0.5,        var.melee==-1, -0.5 +sin(var.ls)*1.5*limb_speed,  0.3) ) -sin(pi*swing_progress)*if(var.melee== 1, 2, 0)",
					"right_arm.ty": "body.ty +2   +if(!is_riding&&!is_on_ground&&is_in_water, (1 -cos(var.swim)/2)*clamp(  limb_speed*8, 0, 1)                                                                     , sin(var.r +var.b-torad(60))/7                                            +if(var.melee==-1, -2 +clamp(torad(head_yaw), 0, 2), 0)                          +if(is_riding, 1, 0) +(0.5)*var.pose ) +if(var.melee== 1, 0, sin(pi*swing_progress)*4) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2",
					"left_arm.ty": " body.ty +2   +if(!is_riding&&!is_on_ground&&is_in_water, (1 -cos(var.swim)/2)*clamp(  limb_speed*8, 0, 1)                                                                     , sin(var.r +var.b-torad(60))/7                                            +if(var.melee== 1, -2 +clamp(torad(head_yaw), 0, 2), 0)                          +if(is_riding, 1, 0) +(0.5)*var.pose ) +if(var.melee== 1, sin(pi*swing_progress)*4, 0) +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) )*var.nov2",
					"right_arm.tz": "              if(!is_riding&&!is_on_ground&&is_in_water, -1 -cos(var.swim)*2 *clamp(1-limb_speed*8, 0, 1) +head.tz +(-1 +cos(-pi/8 +var.swim)*2 )*clamp(limb_speed*8, 0, 1), (-2*limb_speed) -sin(torad(-30)+var.ls)*if(var.melee==-1, 1, 3)*limb_speed -sin(var.r +var.b)/6 +torad(head_yaw)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -2, 0) +(-0.75)*var.pose ) +if(var.melee==-1, 2*clamp(limb_speed*1.5, 0, 1) -sin(pi*swing_progress)*8, var.melee==1, -1                            +sin(pi*swing_progress)*3, 0) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"left_arm.tz": "               if(!is_riding&&!is_on_ground&&is_in_water, -1 -cos(var.swim)*2 *clamp(1-limb_speed*8, 0, 1) +head.tz +(-1 +cos(-pi/8 +var.swim)*2 )*clamp(limb_speed*8, 0, 1), (-2*limb_speed) +sin(torad(-30)+var.ls)*if(var.melee== 1, 1, 3)*limb_speed -sin(var.r +var.b)/6 -torad(head_yaw)*clamp(1-limb_speed*2, 0, 1) +if(is_riding, -2, 0) +( 0.75)*var.pose ) +if(var.melee==-1, -1                            +sin(pi*swing_progress)*3, var.melee==1, 2*clamp(limb_speed*1.5, 0, 1) -sin(pi*swing_progress)*8, 0) +(sin(limb_swing/2) +2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
				},
				{
					"arms_rotation.sx": "1*clamp(var.fold*4, 0, 1)",
					"arms_rotation.sy": "arms_rotation.sx",
					"arms_rotation.sz": "arms_rotation.sx",
					"arms_rotation.tx": "body.tx*0",
					"arms_rotation.ty": "body.ty*0 +1 -22.75 +sin(var.r +var.b-torad(60))/7 +( cos(-pi/3 +var.r+var.b +sin(var.r+var.b)*1.5) -0.8 )*var.nov2",
					"arms_rotation.tz": "body.tz*0 +0.5",
					"arms_rotation.rx": "torad(-30)*sin(var.fold*2)*2 +torad(15)*random(id) +(-sin(torad(-45)+var.ls*2 -sin(var.ls*2)/3)/6 -torad(20))*clamp(limb_speed, 0, 1) +( sin(-pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2 +(sin(limb_swing/2) -pi/4)/2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"arms_rotation.ry": "torad(head_yaw)/6*clamp(1-limb_speed*2, 0, 1) -sin(torad(45)+var.ls)/3*limb_speed*clamp(1-var.fold-1+limb_speed*2, 0, 1)",
					"arms_rotation.rz": "0",
					"arms.rx": "0",
					"right.sx": "right_arm.sx",
					"left.sx": "  left_arm.sx",
					"right.sy": "right_arm.sy",
					"left.sy": "  left_arm.sy",
					"right.sz": "right_arm.sz",
					"left.sz": "  left_arm.sz",
					"right.rx": "right_arm.rx",
					"right.ry": "right_arm.ry",
					"right.rz": "right_arm.rz",
					"right.tx": "right_arm.tx",
					"right.ty": "right_arm.ty-24",
					"right.tz": "right_arm.tz",
					"left.rx": "left_arm.rx",
					"left.ry": "left_arm.ry",
					"left.rz": "left_arm.rz",
					"left.tx": "left_arm.tx",
					"left.ty": "left_arm.ty-24",
					"left.tz": "left_arm.tz"
				},
				{
					"right_leg.rx": "if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, (torad(1)+sin(var.r +var.b)/60) +asin( sin(var.ls))/3*var.ws +sin(var.ls)/1.3*clamp(-1+limb_speed*3, 0, 1) +clamp(-cos(var.ls)/1.8*clamp(limb_speed*1.5, 0, 1), 0, torad(45)) +torad(15)*clamp(-0.5+limb_speed*2, 0, 1) -torad(head_yaw)/30*clamp(1-limb_speed*2, 0, 1) ) +torad( 4)*var.melee +torad(2)*var.fold +torad(-5  )*var.pose +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
					"left_leg.rx": " if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, (torad(1)+sin(var.r +var.b)/60) +asin(-sin(var.ls))/3*var.ws -sin(var.ls)/1.3*clamp(-1+limb_speed*3, 0, 1) +clamp( cos(var.ls)/1.8*clamp(limb_speed*1.5, 0, 1), 0, torad(45)) +torad(15)*clamp(-0.5+limb_speed*2, 0, 1) +torad(head_yaw)/30*clamp(1-limb_speed*2, 0, 1) ) +torad(-4)*var.melee +torad(2)*var.fold +torad(12.5)*var.pose +( -cos(var.r+var.b +sin(var.r+var.b))/18 )*var.nov2",
					"right_leg.ry": "if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, if(var.melee==-1, torad( 15)                                    , torad( 5+12*random(id)*var.fold)*clamp(1-limb_speed*4, 0, 1)    )                                                                                                                                     )                                         +torad( 0  )*var.pose",
					"left_leg.ry": " if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, if(var.melee== 1, torad(-15)                                    , torad(-5-12*random(id)*var.fold)*clamp(1-limb_speed*4, 0, 1)    )                                                                                                                                     )                                         +torad(-40 )*var.pose",
					"right_leg.rz": "if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, if(var.melee==-1, torad( 5 ) +sin(torad(-10)+var.ls)/3*limb_speed, var.melee== 1, torad( 5)*clamp(1-limb_speed*2, 0, 1), 0) -torad(head_yaw)/45*clamp(1-limb_speed*2, 0, 1)                                                                                             )                                         +torad(2.5 )*var.pose",
					"left_leg.rz": " if(is_riding, 0, !is_riding&&!is_on_ground&&is_in_water, 0, if(var.melee== 1, torad(-5 ) +sin(torad(-10)+var.ls)/3*limb_speed, var.melee==-1, torad(-5)*clamp(1-limb_speed*2, 0, 1), 0) -torad(head_yaw)/45*clamp(1-limb_speed*2, 0, 1)                                                                                             )                                         +torad(-12 )*var.pose",
					"right_leg.tx": "  -2 +if(!is_riding&&!is_on_ground&&is_in_water,         0, if(var.melee==-1, -2*clamp(1-limb_speed, 0, 1), 0)                                                                                        ) +(-0.75)*var.pose",
					"left_leg.tx": "    2 +if(!is_riding&&!is_on_ground&&is_in_water,         0, if(var.melee== 1,  2*clamp(1-limb_speed, 0, 1), 0)                                                                                        ) +( 1   )*var.pose",
					"right_leg.ty": "  24 +if(!is_riding&&!is_on_ground&&is_in_water, body.ty -14 -0.8*clamp(limb_speed*8, 0, 1) -sin(pi*swing_progress)*4, clamp( cos(var.ls)*2*var.ws +clamp(2-limb_speed*6, -3, 0) +(-sin(torad(-30)+var.ls)*3 +head.ty)*clamp(-1+limb_speed*3, 0, 1), -8, 0.2)    ) +14*var.count_swim -sin(hurt_time*pi/10)*2",
					"left_leg.ty": "   24 +if(!is_riding&&!is_on_ground&&is_in_water, body.ty -14 -0.8*clamp(limb_speed*8, 0, 1) -sin(pi*swing_progress)*4, clamp(-cos(var.ls)*2*var.ws +clamp(2-limb_speed*6, -3, 0) +( sin(torad(-30)+var.ls)*3 +head.ty)*clamp(-1+limb_speed*3, 0, 1), -8, 0.2)    ) +14*var.count_swim -sin(hurt_time*pi/10)*2",
					"right_leg.tz": "-0.2 +if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 -sin(pi/4+var.swim)/1.5 -cos(pi/4+var.swim)/2*0 -sin(pi*swing_progress)*4, asin( sin(var.ls))*4*var.ws                                                     +sin(var.ls)*9 *clamp(-1+limb_speed*3, 0, 1) +limb_speed*4) +(-3.25 )*var.pose",
					"left_leg.tz": " -0.2 +if(!is_riding&&!is_on_ground&&is_in_water, todeg(body.rx)/6 +sin(pi/4+var.swim)/1.5 +cos(pi/4+var.swim)/2*0 -sin(pi*swing_progress)*4, asin(-sin(var.ls))*4*var.ws                                                     -sin(var.ls)*9 *clamp(-1+limb_speed*3, 0, 1) +limb_speed*4) +( 2.25 )*var.pose",
					"right_leg2.rx": "if(is_riding, -torad(80), !is_riding&&!is_on_ground&&is_in_water,  cos(pi/4+var.swim-sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +(-sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"left_leg2.rx": " if(is_riding, -torad(80), !is_riding&&!is_on_ground&&is_in_water, -cos(pi/4+var.swim+sin(var.swim)/2*clamp(limb_speed*8, 0, 1))/3 +torad(20*clamp(limb_speed*8, 0, 1)), 0) +( sin(limb_swing/2)/4 -torad(20) )*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"right_leg2.ry": "if(is_riding,  torad(20), !is_riding&&!is_on_ground&&is_in_water, body.ry, 0)",
					"left_leg2.ry": " if(is_riding, -torad(20), !is_riding&&!is_on_ground&&is_in_water, body.ry, 0)",
					"right_leg2.rz": "if(is_riding,  0        , !is_riding&&!is_on_ground&&is_in_water, torad( 3), 0) -(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"left_leg2.rz": " if(is_riding,  0        , !is_riding&&!is_on_ground&&is_in_water, torad(-3), 0) +(sin(limb_swing/2)/2 -pi/2)/6*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)"
				},
				{
					"r_eye_top.ty": "clamp(head_pitch/60, -0.8, 0.5) +if(is_aggressive, -0.6 +sin(-random(id))/3, 0) -sin(pi*2*swing_progress)/2 +clamp(2*var.nov1, 0, 0.3) +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"l_eye_top.ty": "clamp(head_pitch/60, -0.8, 0.5) +if(is_aggressive, -0.6 +sin(-random(id))/3, 0) -sin(pi*2*swing_progress)/2 +clamp(2*var.nov1, 0, 0.3) +(-1.5 -cos(limb_swing/3)/2)/4*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"ctrl_r_pupil.tx": " 0.5 -head_yaw/if(is_aggressive, 180, 80 +160*var.ylook) +(-sin(pi/4+var.r+age/10)*3 -0.3 )*clamp(var.nov1*4, 0, 1)",
					"ctrl_l_pupil.tx": "-0.5 -head_yaw/if(is_aggressive, 180, 80 +160*var.ylook) +(-sin(pi/4+var.r+age/10)*3 +0.3 )*clamp(var.nov1*4, 0, 1)",
					"ctrl_r_pupil.ty": "0.5 +clamp(head_pitch/80, -0.5, 0.5) +if(is_aggressive, -1 +sin(-var.r)/2, 0)/4 -sin(pi*swing_progress)/4 +( -cos(var.r+var.b +sin(var.r+var.b) )/4 )*var.nov2 +clamp(2*var.nov1, 0, 0.3) -(-torad(15 +7*random(id))*clamp(sin(limb_speed*3), 0, 1) )*var.fold +(-1 -cos(limb_swing/3)/2)*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"ctrl_l_pupil.ty": "ctrl_r_pupil.ty",
					"right_blink.sy": "clamp(1.5 -abs(sin(var.r+age/8)*6), 0, 1)*clamp(-32 +cos((var.r+age/8)/1.5)*40 +cos((var.r+age/8)/4)*40, 0, 1)",
					"left_blink.sy": "right_blink.sy",
					"right_brow.tx": "-2 +if(is_aggressive,  0.2, 0) +( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2",
					"left_brow.tx": "  2 +if(is_aggressive, -0.2, 0) -( cos(-pi/3 +var.r+var.b )/6 +0.05 )*var.nov2",
					"right_brow.ty": "-24-4.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 +clamp(-torad(head_yaw)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +if(is_aggressive, -1 +sin(-var.r)/3, 0) -sin(hurt_time*pi/10)*(1.5 +sin(limb_swing/3)) +if(limb_speed>0.5, sin(pi/4+var.ls*2)/4*limb_speed*(1+random(sin(id))), 0) -sin(pi*swing_progress) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1",
					"left_brow.ty": " -24-4.5 +clamp(-sin(var.r+age /110)*4, -0.3, 0) +clamp(head_pitch/60, -0.8, 0.5)*1.2 +clamp( torad(head_yaw)/2, -0.5, 0.2)*clamp(-sin(var.r+age/90)*6, 0, 1)*(0.6+0.4*var.ylook*random(id)) +if(is_aggressive, -1 +cos(-var.r)/3, 0) -sin(hurt_time*pi/10)*(1.5 -sin(limb_swing/3)) +if(limb_speed>0.5, sin(     var.ls*2)/4*limb_speed*(1+random(cos(id))), 0) -sin(pi*swing_progress) +( cos(-pi/3 +var.r+var.b )/1.5 -0.1 )*var.nov2 -0.2*var.nov1",
					"right_brow.rz": "      clamp( sin(var.r+age /110), 0, torad( 5)) +if(is_aggressive, torad( 10), 0) +( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2",
					"left_brow.rz": "       clamp(-sin(var.r+age /110), torad(-5), 0) +if(is_aggressive, torad(-10), 0) -( cos(-pi/3 +var.r+var.b )/10 +torad(2) )*var.nov2",
					"nose2.rx": "      cos(var.ls*2)/8*limb_speed +clamp(-torad(head_pitch)/3 +sin(pi*2*swing_progress)/2 +( -cos(pi/3 +var.r+var.b +sin(var.r+var.b) )/6 )*var.nov2, -pi/4, pi/40) +(-cos(limb_swing/2)/4 -torad(20))*2*if(is_hurt, -sin(hurt_time*pi/5)/6*hurt_time, 0)",
					"nose2.rz": "clamp(cos(var.ls  )/6*limb_speed -torad(head_yaw)/6*clamp(2-limb_speed*4, -1.5, 0) +if(!is_riding&&age>10, -(head.ry-var.y)*1.5 -(rot_y-var.z)*2, 0), -pi/4, pi/4) -head.rz/2"
				},
				{
					"right_eye.sz": "if(between(player_pos_x-pos_x, -30, 30)&&between(player_pos_y-pos_y, -30, 30)&&between(player_pos_z-pos_z, -30, 30), 1, 2)",
					"left_eye.sz": "right_eye.sz",
					"right_eye_white.sx": "2",
					"right_eye_white.sy": "clamp(1 -(r_eye_top.ty), 0.5, 3)",
					"r_eye_pupil.tx": "clamp(ctrl_r_pupil.tx, -0.5, 0.5)",
					"r_eye_pupil.ty": "clamp(ctrl_r_pupil.ty, r_eye_top.ty, 1)",
					"r_eye_pupil_up.sy": "clamp(1 -(ctrl_r_pupil.ty-0.5)              , 0.5, clamp(1-r_eye_top.ty, 0.5, 1))",
					"r_eye_pupil_do.sy": "clamp(1 +(ctrl_r_pupil.ty-0.5) -r_eye_top.ty, 0.5, 1)",
					"r_eye_pupil_in.sx": "clamp(1 -(ctrl_r_pupil.tx-0.5)              , 0.75, 1)",
					"r_eye_pupil_ou.sx": "clamp(1 +(ctrl_r_pupil.tx+0.5)              , 1, 1)",
					"right_eyelid.sy": "clamp(right_eye_white.sy, 1, 4)",
					"right_eyelid.sz": "if(right_eyelid.sy==0||right_blink.sy==0, 0, 1)",
					"right_eyelid.tz": "0",
					"left_eye_white.sx": "2",
					"left_eye_white.sy": "clamp(1 -(l_eye_top.ty), 0.5, 3)",
					"l_eye_pupil.tx": "clamp(ctrl_l_pupil.tx, -0.5, 0.5)",
					"l_eye_pupil.ty": "clamp(ctrl_l_pupil.ty, l_eye_top.ty, 1)",
					"l_eye_pupil_up.sy": "clamp(1 -(ctrl_l_pupil.ty-0.5)              , 0.5, clamp(1-l_eye_top.ty, 0.5, 1))",
					"l_eye_pupil_do.sy": "clamp(1 +(ctrl_l_pupil.ty-0.5) -l_eye_top.ty, 0.5, 1)",
					"l_eye_pupil_in.sx": "clamp(1 -(ctrl_l_pupil.tx-0.5)              , 1, 1)",
					"l_eye_pupil_ou.sx": "clamp(1 +(ctrl_l_pupil.tx+0.5)              , 0.75, 1)",
					"left_eyelid.sy": "clamp(left_eye_white.sy, 1, 4)",
					"left_eyelid.sz": "if(left_eyelid.sy==0||left_blink.sy==0, 0, 1)",
					"left_eyelid.tz": "0"
				},
				{
					"var.y": "var.y2",
					"var.y2": "var.y3",
					"var.y3": "head.ry",
					"var.z": "var.z2",
					"var.z2": "var.z3",
					"var.z3": "rot_y"
				}
			]
		},
		{
			"part": "nose",
			"id": "nose",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"boxes": [
				{"coordinates": [-4, 24, -4, 8, 10, 8], "textureOffset": [0, 0]},
				{"coordinates": [-4, 34, -4, 8, 10, 8], "textureOffset": [0, 64]},
				{"coordinates": [-5, 33, -5, 10, 1, 10], "textureOffset": [24, 92]},
				{"coordinates": [-4, 24, -4, 8, 10, 8], "textureOffset": [32, 0], "sizeAdd": 0.251}
			],
			"submodels": [
				{
					"id": "right_eye",
					"invertAxis": "xy",
					"mirrorTexture": "u",
					"translate": [2, 28, -4],
					"submodels": [
						{
							"id": "r_eye_top",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, 0, 0.025]
						},
						{
							"id": "r_eye_pupil",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [-0.5, -0.5, 0],
							"submodels": [
								{
									"id": "r_eye_pupil_in",
									"invertAxis": "xy",
									"mirrorTexture": "u",
									"translate": [-0.5, 0, 0],
									"submodels": [
										{
											"id": "r_eye_pupil_ou",
											"invertAxis": "xy",
											"mirrorTexture": "u",
											"translate": [1, 0, 0],
											"submodels": [
												{
													"id": "r_eye_pupil_do",
													"invertAxis": "xy",
													"mirrorTexture": "u",
													"translate": [-0.5, -0.5, 0],
													"submodels": [
														{
															"id": "r_eye_pupil_up",
															"invertAxis": "xy",
															"mirrorTexture": "u",
															"translate": [0, 1, 0],
															"boxes": [
																{
																	"coordinates": [-0.5, -1, -0.07, 1, 1, 0.3],
																	"uvNorth": [2, 2, 3, 3],
																	"uvEast": [2, 2, 2.25, 3],
																	"uvSouth": [3, 2, 2, 3],
																	"uvWest": [2.75, 2, 3, 3],
																	"uvUp": [3, 2.25, 2, 2],
																	"uvDown": [3, 3, 2, 2.75],
																	"sizeAdd": 0.005
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"id": "right_eye_white",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [1, -1, 0],
							"boxes": [
								{
									"coordinates": [-1, 0, -0.03, 1, 1, 0.25],
									"uvNorth": [1, 2, 2, 3],
									"uvEast": [1, 2, 1.25, 3],
									"uvSouth": [2, 2, 1, 3],
									"uvWest": [1.75, 2, 2, 3],
									"uvUp": [2, 2.25, 1, 2],
									"uvDown": [2, 3, 1, 2.75]
								}
							]
						},
						{
							"id": "right_eyelid",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, -1, 1],
							"submodels": [
								{
									"id": "right_blink",
									"invertAxis": "xy",
									"mirrorTexture": "u",
									"translate": [0, 1, 0],
									"boxes": [
										{
											"coordinates": [-1, -1, -0.08, 2, 1, 0.3],
											"uvNorth": [1, 3, 3, 4],
											"uvEast": [1, 3, 1.25, 4],
											"uvSouth": [3, 3, 1, 4],
											"uvWest": [2.75, 3, 3, 4],
											"uvUp": [3, 3, 1, 3.25],
											"uvDown": [3, 4, 1, 3.75],
											"sizeAdd": 0.015
										}
									]
								}
							]
						},
						{
							"id": "ctrl_r_pupil",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, 0, 0]
						}
					]
				},
				{
					"id": "left_eye",
					"invertAxis": "xy",
					"mirrorTexture": "u",
					"translate": [-2, 28, -4],
					"submodels": [
						{
							"id": "l_eye_top",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, 0, 0.025]
						},
						{
							"id": "l_eye_pupil",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0.5, -0.5, 0],
							"submodels": [
								{
									"id": "l_eye_pupil_in",
									"invertAxis": "xy",
									"mirrorTexture": "u",
									"translate": [-0.5, 0, 0],
									"submodels": [
										{
											"id": "l_eye_pupil_ou",
											"invertAxis": "xy",
											"mirrorTexture": "u",
											"translate": [1, 0, 0],
											"submodels": [
												{
													"id": "l_eye_pupil_do",
													"invertAxis": "xy",
													"mirrorTexture": "u",
													"translate": [-0.5, -0.5, 0],
													"submodels": [
														{
															"id": "l_eye_pupil_up",
															"invertAxis": "xy",
															"mirrorTexture": "u",
															"translate": [0, 1, 0],
															"boxes": [
																{
																	"coordinates": [-0.5, -1, -0.07, 1, 1, 0.3],
																	"uvNorth": [5, 2, 6, 3],
																	"uvEast": [5, 2, 5.25, 3],
																	"uvSouth": [6, 2, 5, 3],
																	"uvWest": [5.75, 2, 6, 3],
																	"uvUp": [6, 2.25, 5, 2],
																	"uvDown": [6, 3, 5, 2.75],
																	"sizeAdd": 0.005
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"id": "left_eye_white",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [-1, -1, 0],
							"boxes": [
								{
									"coordinates": [0, 0, -0.03, 1, 1, 0.25],
									"uvNorth": [6, 2, 7, 3],
									"uvEast": [6, 2, 6.25, 3],
									"uvSouth": [7, 2, 6, 3],
									"uvWest": [6.75, 2, 7, 3],
									"uvUp": [7, 2.25, 6, 2],
									"uvDown": [7, 3, 6, 2.75]
								}
							]
						},
						{
							"id": "left_eyelid",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, -1, 1],
							"submodels": [
								{
									"id": "left_blink",
									"invertAxis": "xy",
									"mirrorTexture": "u",
									"translate": [0, 1, 0],
									"boxes": [
										{
											"coordinates": [-1, -1, -0.08, 2, 1, 0.3],
											"uvNorth": [5, 3, 7, 4],
											"uvEast": [5, 3, 5.25, 4],
											"uvSouth": [7, 3, 5, 4],
											"uvWest": [6.75, 3, 7, 4],
											"uvUp": [7, 3, 5, 3.25],
											"uvDown": [7, 4, 5, 3.75],
											"sizeAdd": 0.015
										}
									]
								}
							]
						},
						{
							"id": "ctrl_l_pupil",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, 0, 0]
						}
					]
				},
				{
					"id": "left_brow",
					"invertAxis": "xy",
					"translate": [-2, 28.5, -3.9],
					"boxes": [
						{
							"coordinates": [-1.98, -0.5, -0.25, 3, 1, 0.25],
							"uvNorth": [5, 1, 8, 2],
							"uvEast": [5, 1, 5.25, 2],
							"uvSouth": [8, 1, 5, 2],
							"uvWest": [7.75, 1, 8, 2],
							"uvUp": [8, 1.25, 5, 1],
							"uvDown": [8, 2, 5, 1.75]
						},
						{
							"coordinates": [-1.98, 0.5, -0.25, 2, 1, 0.25],
							"uvNorth": [6, 0, 8, 1],
							"uvEast": [6, 0, 7, 1],
							"uvSouth": [8, 0, 6, 1],
							"uvWest": [7.85, 0, 8, 1],
							"uvUp": [8, 1, 6, 0],
							"uvDown": [8, 1, 6, 0.85]
						}
					]
				},
				{
					"id": "right_brow",
					"invertAxis": "xy",
					"translate": [2, 28.5, -3.9],
					"boxes": [
						{
							"coordinates": [-1.02, -0.5, -0.25, 3, 1, 0.25],
							"uvNorth": [0, 1, 3, 2],
							"uvEast": [0, 1, 0.25, 2],
							"uvSouth": [3, 1, 0, 2],
							"uvWest": [2.75, 1, 3, 2],
							"uvUp": [3, 1.25, 0, 1],
							"uvDown": [3, 2, 0, 1.75]
						},
						{
							"coordinates": [-0.02, 0.5, -0.25, 2, 1, 0.25],
							"uvNorth": [0, 0, 2, 1],
							"uvEast": [0, 0, 1, 1],
							"uvSouth": [2, 0, 0, 1],
							"uvWest": [1.85, 0, 2, 1],
							"uvUp": [2, 1, 0, 0],
							"uvDown": [2, 1, 0, 0.85]
						}
					]
				},
				{
					"id": "nose2",
					"invertAxis": "xy",
					"translate": [0, 26.5, -4],
					"boxes": [
						{"coordinates": [-1, -3.5, -2, 2, 4, 2], "textureOffset": [24, 0]}
					]
				}
			]
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"boxes": [
				{"coordinates": [-4, 12, -3, 8, 12, 6], "textureOffset": [16, 20]},
				{"coordinates": [3.5, 13, 3, 2, 4, 4], "textureOffset": [52, 74]},
				{"coordinates": [-5.5, 13, 3, 2, 6, 4], "textureOffset": [40, 74]},
				{"coordinates": [-3.5, 13, 3, 7, 8, 4], "textureOffset": [42, 62]},
				{"coordinates": [-3.5, 21, 3, 7, 3, 4], "textureOffset": [0, 83], "sizeAdd": 0.15}
			],
			"submodels": [
				{
					"id": "coat",
					"invertAxis": "xy",
					"translate": [0, 22, 0],
					"boxes": [
						{"coordinates": [-4, -18, -3, 8, 20, 6], "textureOffset": [0, 38], "sizeAdd": 0.25}
					]
				},
				{
					"id": "arms_rotation",
					"invertAxis": "xy",
					"translate": [0, 22.5, 0.35],
					"rotate": [43, 0, 0],
					"boxes": [
						{"coordinates": [4, -8, -2.05, 4, 8, 4], "textureOffset": [44, 22]},
						{"coordinates": [4, -4, -2.05, 4, 4, 4], "textureOffset": [0, 104], "sizeAdd": 0.25},
						{"coordinates": [-4, -8, -2.05, 8, 4, 4], "textureOffset": [40, 38]},
						{"coordinates": [-5, -8, -2.05, 10, 4, 4], "textureOffset": [22, 84], "sizeAdd": 0.25}
					],
					"submodels": [
						{
							"id": "arms_flipped",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, -24, 0],
							"boxes": [
								{"coordinates": [-8, 16, -2.05, 4, 8, 4], "textureOffset": [44, 22]},
								{"coordinates": [-8, 20, -2.05, 4, 4, 4], "textureOffset": [0, 96], "sizeAdd": 0.25}
							]
						}
					]
				}
			]
		},
		{
			"part": "arms",
			"id": "arms",
			"invertAxis": "xy",
			"translate": [0, -21, 1],
			"submodels": [
				{
					"id": "right",
					"invertAxis": "xy",
					"translate": [5, 22, 0],
					"boxes": [
						{"coordinates": [-1, -10, -2, 4, 12, 4], "textureOffset": [40, 46]},
						{"coordinates": [-1, -10, -2, 4, 12, 4], "textureOffset": [0, 112], "sizeAdd": 0.25}
					]
				},
				{
					"id": "left",
					"invertAxis": "xy",
					"translate": [-5, 22, 0],
					"submodels": [
						{
							"id": "arms_sub_2",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [0, 0, -1],
							"boxes": [
								{"coordinates": [-3, -10, -1, 4, 12, 4], "textureOffset": [40, 46]},
								{"coordinates": [-3, -10, -1, 4, 12, 4], "textureOffset": [16, 112], "sizeAdd": 0.25}
							]
						}
					]
				}
			]
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [-5, -22, 0],
			"boxes": [
				{"coordinates": [4, 12, -2, 4, 12, 4], "textureOffset": [40, 46]},
				{"coordinates": [4, 12, -2, 4, 12, 4], "textureOffset": [0, 112], "sizeAdd": 0.25}
			]
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"mirrorTexture": "u",
			"translate": [5, -22, 0],
			"submodels": [
				{
					"id": "left_arm_sub_0",
					"invertAxis": "xy",
					"mirrorTexture": "u",
					"translate": [0, 0, 0],
					"boxes": [
						{"coordinates": [-8, 12, -2, 4, 12, 4], "textureOffset": [16, 112], "sizeAdd": 0.25},
						{"coordinates": [-8, 12, -2, 4, 12, 4], "textureOffset": [40, 46]}
					]
				}
			]
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [-2, 0, 0],
			"submodels": [
				{
					"id": "right_leg2",
					"invertAxis": "xy",
					"translate": [2, 12, 0],
					"boxes": [
						{"coordinates": [-2, -12, -2, 4, 12, 4], "textureOffset": [0, 22]},
						{"coordinates": [-2, -12, -2, 4, 12, 4], "textureOffset": [32, 112], "sizeAdd": 0.25}
					]
				}
			]
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"mirrorTexture": "u",
			"translate": [2, 0, 0],
			"submodels": [
				{
					"id": "left_leg2",
					"invertAxis": "xy",
					"mirrorTexture": "u",
					"translate": [-2, 12, 0],
					"submodels": [
						{
							"id": "left_leg_sub_1",
							"invertAxis": "xy",
							"mirrorTexture": "u",
							"translate": [2, -12, 0],
							"boxes": [
								{"coordinates": [-4, 0, -2, 4, 12, 4], "textureOffset": [48, 112], "sizeAdd": 0.25},
								{"coordinates": [-4, 0, -2, 4, 12, 4], "textureOffset": [0, 22]}
							]
						}
					]
				}
			]
		},
		{
			"part": "hat",
			"id": "hat",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "nose",
			"id": "nose",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "nose",
			"id": "nose",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "nose",
			"id": "nose",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "arms",
			"id": "arms",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "arms",
			"id": "arms",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		}
	]
}