{
	"credit": "Created by FreshLX for Fresh_Animations",
	"textureSize": [128, 96],
	"models": [
		{
			"part": "headwear",
			"id": "headwear",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"submodels": [
				{
					"id": "head_piglin",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"boxes": [
						{"coordinates": [-5, 24, -4, 10, 8, 8], "textureOffset": [92, 0]},
						{"coordinates": [-2, 24, -5, 4, 4, 1], "textureOffset": [82, 11]},
						{"coordinates": [-3, 24, -5, 1, 2, 1], "textureOffset": [96, 5]},
						{"coordinates": [2, 24, -5, 1, 2, 1], "textureOffset": [96, 5]},
						{"coordinates": [-5, 24, -4, 10, 8, 8], "textureOffset": [92, 16], "sizeAdd": 0.51}
					],
					"submodels": [
						{
							"id": "shroom",
							"invertAxis": "xy",
							"translate": [-2, 35.5, 1],
							"rotate": [0, 45, 0],
							"boxes": [
								{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
							],
							"submodels": [
								{
									"id": "shroom_part",
									"invertAxis": "xy",
									"translate": [0, 0, 0],
									"rotate": [0, -90, 0],
									"boxes": [
										{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"part": "head",
			"id": "head",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"submodels": [
				{
					"id": "Created_by_FreshLX_for_Fresh_Animations",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				}
			],
			"animations": [
				{
					"var.r": "random(id)*pi*4",
					"var.b": "var.r +age/80*pi*2",
					"var.ls": "var.r +limb_swing/1.3",
					"var.hurt": "-sin(hurt_time/2)*hurt_time/10",
					"var.att": "if(is_aggressive, if(left_arm.ry>=torad(10), -1, right_arm.ry<=torad(-10), 1, 2), 0 )",
					"var.run": "clamp(if(!is_hurt && limb_speed>=0.55, min(20, var.run +0.1 *frame_time*20), max(0, var.run -0.1 *frame_time*20)), 0, 1)",
					"var.walk": "1-var.run",
					"var.yaw": "clamp(head_yaw,-90,90)"
				},
				{
					"head.rx": "-sin(pi/4+var.b)/40 +torad(head_pitch/1.4 +clamp( var.yaw  /4, 0, 90) +clamp(- var.yaw  /4, 0, 90) ) +torad( 10 +30*sin(limb_swing/1.5) )*var.hurt -sin(pi*2*swing_progress)/3",
					"head.ry": "                     torad(   var.yaw/1.2 +clamp(head_pitch/4,-90, 0) +clamp(-head_pitch/4,-90, 0) )               +sin(limb_swing/2.5)  *var.hurt",
					"head.rz": "torad(5)*(random(id)*2-1)*(1-limb_speed) -cos(var.ls)/15*limb_speed +torad( var.yaw)/4 +(sin(pi*swing_progress)/3)",
					"head.tx": "sin(pi/4+var.ls)/2*limb_speed +(sin(pi*swing_progress)*3)",
					"head.ty": "sin(-pi/12 +var.b)/4 +((-sin( torad(10)+var.ls*2 +cos(var.ls*2)/3 ) +1.5 )*limb_speed)*var.walk   +(( cos( torad(60)+var.ls*2 +cos(var.ls*2)/3 )*1.2 -0.6 )*limb_speed)*var.run   +torad(clamp( var.yaw/4 +head_pitch*2,-90, 0) +clamp(- var.yaw/4 -head_pitch*2,-90, 0) ) +if(is_riding, 2, 0.3) +( sin(limb_swing/2)/2 -1.5 )*var.hurt +(sin(pi*swing_progress)*2)",
					"head.tz": "(sin(-pi*swing_progress)*4) +if(is_riding, -3, 0) +( cos(var.ls*2 -sin(var.ls*2)/2 )/2*var.walk*if(var.att!=0||var.att!=2, 0, 1) -1.7*if(var.att==2, 2, 1) )*limb_speed",
					"headwear.rx": "head.rx",
					"headwear.ry": "head.ry",
					"headwear.rz": "head.rz",
					"headwear.tx": "head.tx",
					"headwear.ty": "head.ty",
					"headwear.tz": "head.tz",
					"body.ry": "torad(if(var.att==-1,-70, var.att==1, 70, if(is_riding, 0, -15*clamp(1-limb_speed*3, 0, 1) ))) -sin(var.ls)/if(is_aggressive, 8, 4)*limb_speed +torad( var.yaw)/6 +(sin(-pi*swing_progress)/4) +torad( 20*cos(limb_swing/3) )*var.hurt",
					"body.rx": "-sin(var.b)/40 +torad(10*if(var.att==2, 1.5, 1))*limb_speed +(sin(pi*swing_progress)/3) +torad(if(is_riding, 15, 0)) +torad(-20 +10*sin(limb_swing/2) )*var.hurt*if(var.att!=0||var.att!=2, 0, 1)",
					"body.rz": "cos(-pi/4+var.ls)/20*limb_speed -( sin(limb_swing/2) )/22*var.hurt +sin(pi*swing_progress)/8",
					"body.tx": "cos(-pi/4+var.ls)/2 *limb_speed                  -0.4    *var.hurt +sin(pi*swing_progress)*2",
					"body.ty": "sin(var.b)/4 +( cos( torad(120)+var.ls*2 -sin(var.ls*2)/3 ) +1 )*limb_speed*var.walk   +cos( torad(100)+var.ls*2 -sin(torad(-60)+var.ls*2)/3 )*1.3*limb_speed*var.run   +if(is_riding, 2, 0.3) +(sin(pi*swing_progress)*2)",
					"body.tz": "head.tz"
				},
				{
					"right_arm.rx": "if(var.att==-1, torad(-100) +torad(head_pitch), var.att==1, torad(-90 ) +torad(head_pitch), var.att==2, torad( var.yaw)/8 -sin(var.ls)/6*limb_speed +sin(pi/2+var.ls/2)/6*limb_speed +torad(clamp(-135*limb_speed, -90, 0)), torad(if(is_riding, -8 ,   var.yaw/8 -50*sin(var.ls)*limb_speed)) ) +if(is_riding, 0, sin(var.b+torad(60))/40) +torad( sin(limb_swing/1.7)*30 -30 )*var.hurt -sin(pi*2*swing_progress)",
					"left_arm.rx": " if(var.att==-1, torad(-90 ) +torad(head_pitch), var.att==1, torad(-100) +torad(head_pitch), var.att==2,-torad( var.yaw)/8 +sin(var.ls)/6*limb_speed +sin(pi/2+var.ls/2)/6*limb_speed +torad(clamp(-135*limb_speed, -90, 0)), torad(if(is_riding, -35, - var.yaw/8 +50*sin(var.ls)*limb_speed)) ) +if(is_riding, 0, sin(var.b+torad(60))/40) +torad( sin(limb_swing/2  )*30 -30 )*var.hurt +sin(pi*swing_progress)*2",
					"right_arm.ry": "if(var.att==-1, 0, var.att==1, torad(-20), body.ry +sin(var.b+pi/2)/20) -torad(8)*clamp(limb_speed*3, 0, 1) +(sin(-pi/2*swing_progress*2)/4)",
					"left_arm.ry": " if(var.att==-1, torad( 20), var.att==1, 0, body.ry +sin(var.b-pi/2)/20) +torad(8)*clamp(limb_speed*3, 0, 1)                                 ",
					"right_arm.rz": "if(var.att==-1, torad(-8 ), var.att==1, torad(-5), is_riding, torad( 35), torad( 5 +if(is_in_water, 10, 0) +clamp(-head_pitch/8, 0, 45) ) ) +(sin(-pi/2*swing_progress*2)) +torad(10)*var.run",
					"left_arm.rz": " if(var.att==-1, torad( 5 ), var.att==1, torad( 8), is_riding, torad( 10), torad(-5 +if(is_in_water,-10, 0) +clamp( head_pitch/8,-45, 0) ) ) -(sin( pi  *swing_progress  )) -torad(10)*var.run",
					"right_arm.tx": "if(var.att==-1, -1, var.att==1, -4, -5 +body.tx) +clamp(-torad( var.yaw)/2.7, 0, 0.6) -var.hurt +(sin(pi*swing_progress)*2)",
					"left_arm.tx": " if(var.att==-1,  4, var.att==1,  1,  5 +body.tx) +clamp( torad( var.yaw)/2  ,-0.8, 0) +var.hurt -(sin(pi*swing_progress)*2)",
					"right_arm.ty": "if(var.att==-1||var.att==1, 2, 2.5) +sin(var.b-pi/8)/4                      +( -sin( torad(10)+var.ls*2 +cos(pi/4+var.ls*2)/3 )*var.walk +cos( torad(-20)+var.ls*2 +cos(pi/4+var.ls*2)/3 )*var.run +1.5 )*limb_speed/(1+var.run) +(body.ty -1)*var.run +if(is_riding, 2, 0)",
					"left_arm.ty": " if(var.att==-1||var.att==1, 2, 2.5) +sin(var.b-pi/8)/4 +if(is_riding, 1, 0) +( -sin( torad(10)+var.ls*2 +cos(pi/4+var.ls*2)/3 )*var.walk +cos( torad(-20)+var.ls*2 +cos(pi/4+var.ls*2)/3 )*var.run +1.5 )*limb_speed/(1+var.run) +(body.ty -1)*var.run +if(is_riding, 2, 0)",
					"right_arm.tz": "if(var.att==-1, -6, var.att==1, -1, -0.5 +(-1 -sin(pi/12+var.ls -cos(var.ls)/2)*3)/if(is_aggressive, 4, 1)*limb_speed +if(is_aggressive, -2*if(var.att==2, 1.5, 1)*limb_speed, 0) +if(is_riding, 0, -0.5*clamp(1-limb_speed*3, 0, 1) ) ) +if(is_riding, -2, 0) +torad( var.yaw) -(sin(pi*swing_progress)*6)",
					"left_arm.tz": " if(var.att==-1, -1, var.att==1, -6, -0.5 +(-1 +sin(pi/12+var.ls +cos(var.ls)/2)*3)/if(is_aggressive, 4, 1)*limb_speed +if(is_aggressive, -2*if(var.att==2, 1.5, 1)*limb_speed, 0) +if(is_riding, 0,  2  *clamp(1-limb_speed*3, 0, 1) ) ) +if(is_riding, -2, 0) -torad( var.yaw)                            "
				},
				{
					"right_leg.rx": "if(is_riding, torad(-80), if(var.att==-1||var.att==1, 0, ( asin( sin(var.ls))/1.3 *clamp(limb_speed, 0.15, 1) +torad(3 +40*clamp(-cos(var.ls), 0, 1) )*clamp(limb_speed*1.5, 0, 1))*var.walk  +( sin(var.ls)/1.5*limb_speed +clamp(-cos(torad(15)+var.ls)/3*clamp(limb_speed*1.5, 0, 1), 0, pi/6) +torad(10)*limb_speed )*var.run    ) +sin(var.b)/40) +torad(-40 -20*sin(limb_swing/2) )*var.hurt",
					"left_leg.rx": " if(is_riding, torad(-80), if(var.att==-1||var.att==1, 0, ( asin(-sin(var.ls))/1.3 *clamp(limb_speed, 0.15, 1) +torad(3 +40*clamp( cos(var.ls), 0, 1) )*clamp(limb_speed*1.5, 0, 1))*var.walk  +(-sin(var.ls)/1.5*limb_speed +clamp( cos(torad(15)+var.ls)/3*clamp(limb_speed*1.5, 0, 1), 0, pi/6) +torad(10)*limb_speed )*var.run    ) +sin(var.b)/40) +torad(-40 +20*sin(limb_swing/2) )*var.hurt",
					"right_leg.ry": "if(var.att==-1, torad(-10 +if(is_riding, 20, 0)), var.att==1, torad(60                      ), if(is_riding, torad( 20), 0                                      ) ) -sin(var.ls)/6*limb_speed*var.walk",
					"left_leg.ry": " if(var.att==-1, torad(-60                      ), var.att==1, torad(10 +if(is_riding,-20, 0)), if(is_riding, torad(-20), torad(-20*clamp(1-limb_speed*3, 0, 1) )) ) -sin(var.ls)/6*limb_speed*var.walk",
					"right_leg.rz": "if(is_riding, 0, torad( 5)*clamp(1-limb_speed*3, 0, 1) +if(var.att==-1||var.att==1, clamp( sin(var.ls)/6 +sin(var.ls)/1.5*limb_speed +torad(10)*limb_speed, -1, 1 ), 0)) +clamp(cos(var.ls)/7*limb_speed -torad(3), 0, 1)*var.walk +torad(-sin(limb_swing/2) +5)*var.hurt",
					"left_leg.rz": " if(is_riding, 0, torad(-5)*clamp(1-limb_speed*3, 0, 1) +if(var.att==-1||var.att==1, clamp(-sin(var.ls)/6 -sin(var.ls)/1.5*limb_speed +torad(10)*limb_speed, -1, 1 ), 0)) +clamp(cos(var.ls)/7*limb_speed +torad(3),-1, 0)*var.walk +torad( sin(limb_swing/2) -5)*var.hurt",
					"right_leg.tx": "if(var.att==-1, -0.5 +if(is_riding, -3, 0), var.att==1, -0.5 +if(is_riding, 3, 0), -2) +if(is_riding||var.att==-1||var.att==1, 0, 0             ) +if(is_riding, -1, 0)",
					"left_leg.tx": " if(var.att==-1,  0.5 +if(is_riding, -3, 0), var.att==1,  0.5 +if(is_riding, 3, 0),  2) +if(is_riding||var.att==-1||var.att==1, 0, sin(var.b)/10 ) +if(is_riding,  1, 0)",
					"right_leg.ty": "if(var.att==-1||var.att==1, 0.2 +if(is_riding, 1, 0), 0.2 +clamp( cos(var.ls)*1.5*limb_speed +body.ty -0.8, -4, 0 )*var.run  ) +12 +if(is_riding, 1.5, 0)  +(-asin(cos(var.ls))*1.15*limb_speed +(1 -2*clamp(-cos(-pi/6+ var.ls), 0, 1) )*clamp(limb_speed*1.5, 0, 1))*var.walk",
					"left_leg.ty": " if(var.att==-1||var.att==1, 0.2 +if(is_riding, 1, 0), 0.2 +clamp(-cos(var.ls)*1.5*limb_speed +body.ty -0.8, -4, 0 )*var.run  ) +12 +if(is_riding, 1.5, 0)  +( asin(cos(var.ls))*1.15*limb_speed +(1 -2*clamp( cos(-pi/6+ var.ls), 0, 1) )*clamp(limb_speed*1.5, 0, 1))*var.walk",
					"right_leg.tz": "if(var.att==-1, -2 +if(is_riding, -2, 0), var.att==1,  2 +if(is_riding, -2, 0), -0.2 +( clamp(( cos(-pi/8 +var.ls)*4)*clamp(limb_speed*1.5, 0, 1) +limb_speed, -3, 0) +limb_speed )*var.walk    +( 0.5 -3.5*clamp(-cos(-pi/8 +var.ls), 0, 1)*clamp(limb_speed*1.5, 0, 1) )*var.run   +if(is_riding, 0,-0.5*clamp(1-limb_speed*3, 0, 1)) ) +if(is_riding, 0, -sin(var.b)/3) +(-1 -sin(limb_swing/2) )*var.hurt",
					"left_leg.tz": " if(var.att==-1,  2 +if(is_riding, -2, 0), var.att==1, -2 +if(is_riding, -2, 0), -0.2 +( clamp((-cos(-pi/8 +var.ls)*4)*clamp(limb_speed*1.5, 0, 1) +limb_speed, -3, 0) +limb_speed )*var.walk    +( 0.5 -3.5*clamp( cos(-pi/8 +var.ls), 0, 1)*clamp(limb_speed*1.5, 0, 1) )*var.run   +if(is_riding, 0, 0.7*clamp(1-limb_speed*3, 0, 1)) ) +if(is_riding, 0, -sin(var.b)/4) +(-1 -sin(limb_swing/2) )*var.hurt"
				},
				{
					"translate.ty": "if(death_time > 0 && !is_in_water, frac(pos_y) * 16, 0)",
					"rotate.rz": "if(death_time > 0, -torad(min(sqrt((death_time - 1) / 20 * 1.6), 1) * 90), 0)",
					"render.shadow_opacity": "if(death_time == 0, 1, (20 - death_time) / 20)",
					"render.shadow_size": 0.5
				},
				{
					"var.deltatime": "frame_time * 20",
					"var.a": "if(is_in_water, 0.1, 1)"
				},
				{
					"var.position_check_head_y": "var.position_head_y + var.velocity_head_tyz * sin(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_check_head_z": "var.position_head_z + var.velocity_head_tyz * cos(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_check_left_arm_y": "var.position_left_arm_y + var.velocity_left_arm_tyz * sin(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.position_check_left_arm_z": "var.position_left_arm_z + var.velocity_left_arm_tyz * cos(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.position_check_right_arm_y": "var.position_right_arm_y + var.velocity_right_arm_tyz * sin(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.position_check_right_arm_z": "var.position_right_arm_z + var.velocity_right_arm_tyz * cos(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.position_check_left_leg_y": "var.position_left_leg_y + var.velocity_left_leg_tyz * sin(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.position_check_left_leg_z": "var.position_left_leg_z + var.velocity_left_leg_tyz * cos(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.position_check_right_leg_y": "var.position_right_leg_y + var.velocity_right_leg_tyz * sin(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime",
					"var.position_check_right_leg_z": "var.position_right_leg_z + var.velocity_right_leg_tyz * cos(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime"
				},
				{
					"var.floor_head": "if(is_in_water || sqrt(var.position_check_head_y * var.position_check_head_y + var.position_check_head_z * var.position_check_head_z) * sin(-head2.rx + atan2(var.position_check_head_y, var.position_check_head_z)) <= 20 + 4 * sin(head2.rx + pi / 2), 1, 0.5)",
					"var.floor_body": "if(is_in_water || var.position_body_y + var.velocity_body_ty * var.deltatime <= 14, 1, 0.5)",
					"var.floor_left_arm": "if(is_in_water || sqrt(var.position_check_left_arm_y * var.position_check_left_arm_y + var.position_check_left_arm_z * var.position_check_left_arm_z) * sin(-left_arm2.rx + atan2(var.position_check_left_arm_y, var.position_check_left_arm_z)) <= 20 + -6 * sin(left_arm2.rx + pi / 2), 1, 0.5)",
					"var.floor_right_arm": "if(is_in_water || sqrt(var.position_check_right_arm_y * var.position_check_right_arm_y + var.position_check_right_arm_z * var.position_check_right_arm_z) * sin(-right_arm2.rx + atan2(var.position_check_right_arm_y, var.position_check_right_arm_z)) <= 20 + -6 * sin(right_arm2.rx + pi / 2), 1, 0.5)",
					"var.floor_left_leg": "if(is_in_water || sqrt(var.position_check_left_leg_y * var.position_check_left_leg_y + var.position_check_left_leg_z * var.position_check_left_leg_z) * sin(-left_leg2.rx + atan2(var.position_check_left_leg_y, var.position_check_left_leg_z)) <= 8 + -6 * sin(left_leg2.rx + pi / 2), 1, 0.5)",
					"var.floor_right_leg": "if(is_in_water || sqrt(var.position_check_right_leg_y * var.position_check_right_leg_y + var.position_check_right_leg_z * var.position_check_right_leg_z) * sin(-right_leg2.rx + atan2(var.position_check_right_leg_y, var.position_check_right_leg_z)) <= 8 + -6 * sin(right_leg2.rx + pi / 2), 1, 0.5)"
				},
				{
					"var.velocity_head_tx": "if(death_time > 0, var.floor_head * var.velocity_head_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_head_ty": "if(death_time > 0, if(var.floor_head == 1, 1, -var.floor_head) * var.velocity_head_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_head_tz": "if(death_time > 0, var.floor_head * var.velocity_head_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_head_rx": "if(death_time > 0, var.floor_head * var.velocity_head_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_head_ry": "if(death_time > 0, var.floor_head * var.velocity_head_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_head_tyz": "sqrt(var.velocity_head_ty * var.velocity_head_ty + var.velocity_head_tz * var.velocity_head_tz)",
					"var.velocity_angle_head": "atan2(var.velocity_head_ty, var.velocity_head_tz)"
				},
				{
					"var.position_head_x": "var.position_head_x + var.velocity_head_tx * var.deltatime",
					"var.position_head_y": "var.position_head_y + var.velocity_head_tyz * sin(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_head_z": "var.position_head_z + var.velocity_head_tyz * cos(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.rotation_head_x": "var.rotation_head_x + var.velocity_head_rx * var.deltatime",
					"var.rotation_head_y": "var.rotation_head_y + var.velocity_head_ry * var.deltatime"
				},
				{
					"physics_head.tx": "var.position_head_x",
					"physics_head.ty": "-4 + var.position_head_y",
					"physics_head.tz": "var.position_head_z",
					"physics_head.rx": "var.rotation_head_x",
					"physics_head.ry": "var.rotation_head_y"
				},
				{
					"var.velocity_body_tx": "if(death_time > 0, var.floor_body * var.velocity_body_tx - var.first_frame * (random() -0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_body_ty": "if(death_time > 0, if(var.floor_body == 1, 1, -var.floor_body) * var.velocity_body_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_body_tz": "if(death_time > 0, var.floor_body * var.velocity_body_tz - var.first_frame * (random() -0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_body_rx": "if(death_time > 0, var.floor_body * var.velocity_body_rx - var.first_frame * (random() -0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_body_ry": "if(death_time > 0, var.floor_body * var.velocity_body_ry - var.first_frame * (random() -0.5) * if(is_in_water, 0.5, 1), 0)"
				},
				{
					"var.position_body_x": "var.position_body_x + var.velocity_body_tx * var.deltatime",
					"var.position_body_y": "var.position_body_y + var.velocity_body_ty * var.deltatime",
					"var.position_body_z": "var.position_body_z + var.velocity_body_tz * var.deltatime",
					"var.rotation_body_x": "var.rotation_body_x + var.velocity_body_rx * var.deltatime",
					"var.rotation_body_y": "var.rotation_body_y + var.velocity_body_ry * var.deltatime"
				},
				{
					"physics_body.tx": "var.position_body_x",
					"physics_body.ty": "-18 + var.position_body_y",
					"physics_body.tz": "var.position_body_z",
					"physics_body.rx": "var.rotation_body_x",
					"physics_body.ry": "var.rotation_body_y"
				},
				{
					"var.velocity_left_arm_tx": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_arm_ty": "if(death_time > 0, if(var.floor_left_arm == 1, 1, -var.floor_left_arm) * var.velocity_left_arm_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_left_arm_tz": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_arm_rx": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_arm_ry": "if(death_time > 0, var.floor_left_arm * var.velocity_left_arm_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_arm_tyz": "sqrt(var.velocity_left_arm_ty * var.velocity_left_arm_ty + var.velocity_left_arm_tz * var.velocity_left_arm_tz)",
					"var.velocity_angle_left_arm": "atan2(var.velocity_left_arm_ty, var.velocity_left_arm_tz)"
				},
				{
					"var.position_left_arm_x": "var.position_left_arm_x + var.velocity_left_arm_tx * var.deltatime",
					"var.position_left_arm_y": "var.position_left_arm_y + var.velocity_left_arm_tyz * sin(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.position_left_arm_z": "var.position_left_arm_z + var.velocity_left_arm_tyz * cos(left_arm2.rx + var.velocity_angle_left_arm) * var.deltatime",
					"var.rotation_left_arm_x": "var.rotation_left_arm_x + var.velocity_left_arm_rx * var.deltatime",
					"var.rotation_left_arm_y": "var.rotation_left_arm_y + var.velocity_left_arm_ry * var.deltatime"
				},
				{
					"physics_left_arm.tx": "var.position_left_arm_x",
					"physics_left_arm.ty": "4 + var.position_left_arm_y",
					"physics_left_arm.tz": "var.position_left_arm_z",
					"physics_left_arm.rx": "var.rotation_left_arm_x",
					"physics_left_arm.ry": "var.rotation_left_arm_y"
				},
				{
					"var.velocity_right_arm_tx": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_arm_ty": "if(death_time > 0, if(var.floor_right_arm == 1, 1, -var.floor_right_arm) * var.velocity_right_arm_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_right_arm_tz": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_arm_rx": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_arm_ry": "if(death_time > 0, var.floor_right_arm * var.velocity_right_arm_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_arm_tyz": "sqrt(var.velocity_right_arm_ty * var.velocity_right_arm_ty + var.velocity_right_arm_tz * var.velocity_right_arm_tz)",
					"var.velocity_angle_right_arm": "atan2(var.velocity_right_arm_ty, var.velocity_right_arm_tz)"
				},
				{
					"var.position_right_arm_x": "var.position_right_arm_x + var.velocity_right_arm_tx * var.deltatime",
					"var.position_right_arm_y": "var.position_right_arm_y + var.velocity_right_arm_tyz * sin(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.position_right_arm_z": "var.position_right_arm_z + var.velocity_right_arm_tyz * cos(right_arm2.rx + var.velocity_angle_right_arm) * var.deltatime",
					"var.rotation_right_arm_x": "var.rotation_right_arm_x + var.velocity_right_arm_rx * var.deltatime",
					"var.rotation_right_arm_y": "var.rotation_right_arm_y + var.velocity_right_arm_ry * var.deltatime"
				},
				{
					"physics_right_arm.tx": "var.position_right_arm_x",
					"physics_right_arm.ty": "4 + var.position_right_arm_y",
					"physics_right_arm.tz": "var.position_right_arm_z",
					"physics_right_arm.rx": "var.rotation_right_arm_x",
					"physics_right_arm.ry": "var.rotation_right_arm_y"
				},
				{
					"var.velocity_left_leg_tx": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_leg_ty": "if(death_time > 0, if(var.floor_left_leg == 1, 1, -var.floor_left_leg) * var.velocity_left_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_left_leg_tz": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_left_leg_rx": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_leg_ry": "if(death_time > 0, var.floor_left_leg * var.velocity_left_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_left_leg_tyz": "sqrt(var.velocity_left_leg_ty * var.velocity_left_leg_ty + var.velocity_left_leg_tz * var.velocity_left_leg_tz)",
					"var.velocity_angle_left_leg": "atan2(var.velocity_left_leg_ty, var.velocity_left_leg_tz)"
				},
				{
					"var.position_left_leg_x": "var.position_left_leg_x + var.velocity_left_leg_tx * var.deltatime",
					"var.position_left_leg_y": "var.position_left_leg_y + var.velocity_left_leg_tyz * sin(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.position_left_leg_z": "var.position_left_leg_z + var.velocity_left_leg_tyz * cos(left_leg2.rx + var.velocity_angle_left_leg) * var.deltatime",
					"var.rotation_left_leg_x": "var.rotation_left_leg_x + var.velocity_left_leg_rx * var.deltatime",
					"var.rotation_left_leg_y": "var.rotation_left_leg_y + var.velocity_left_leg_ry * var.deltatime"
				},
				{
					"physics_left_leg.tx": "var.position_left_leg_x",
					"physics_left_leg.ty": "6 + var.position_left_leg_y",
					"physics_left_leg.tz": "var.position_left_leg_z",
					"physics_left_leg.rx": "var.rotation_left_leg_x",
					"physics_left_leg.ry": "var.rotation_left_leg_y"
				},
				{
					"var.velocity_right_leg_tx": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_leg_ty": "if(death_time > 0, if(var.floor_right_leg == 1, 1, -var.floor_right_leg) * var.velocity_right_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_right_leg_tz": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_right_leg_rx": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_leg_ry": "if(death_time > 0, var.floor_right_leg * var.velocity_right_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_right_leg_tyz": "sqrt(var.velocity_right_leg_ty * var.velocity_right_leg_ty + var.velocity_right_leg_tz * var.velocity_right_leg_tz)",
					"var.velocity_angle_right_leg": "atan2(var.velocity_right_leg_ty, var.velocity_right_leg_tz)"
				},
				{
					"var.position_right_leg_x": "var.position_right_leg_x + var.velocity_right_leg_tx * var.deltatime",
					"var.position_right_leg_y": "var.position_right_leg_y + var.velocity_right_leg_tyz * sin(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime",
					"var.position_right_leg_z": "var.position_right_leg_z + var.velocity_right_leg_tyz * cos(right_leg2.rx + var.velocity_angle_right_leg) * var.deltatime",
					"var.rotation_right_leg_x": "var.rotation_right_leg_x + var.velocity_right_leg_rx * var.deltatime",
					"var.rotation_right_leg_y": "var.rotation_right_leg_y + var.velocity_right_leg_ry * var.deltatime"
				},
				{
					"physics_right_leg.tx": "var.position_right_leg_x",
					"physics_right_leg.ty": "6 + var.position_right_leg_y",
					"physics_right_leg.tz": "var.position_right_leg_z",
					"physics_right_leg.rx": "var.rotation_right_leg_x",
					"physics_right_leg.ry": "var.rotation_right_leg_y"
				},
				{
					"var.first_frame": "if(death_time > 0, 0, 1)"
				},
				{
					"var.by_ewan_howell": 0
				},
				{
					"body_dead.visible": "!is_alive",
					"body_alive.visible": "is_alive",
					"headwear.visible": "is_alive",
					"left_arm.visible": "is_alive",
					"right_arm.visible": "is_alive",
					"left_leg.visible": "is_alive",
					"right_leg.visible": "is_alive"
				},
				{
					"body_quiver.ty": "sin(limb_swing*1.6)*limb_speed*0.7",
					"quiver_y.ty": "body_quiver.ty*1.25"
				}
			]
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"submodels": [
				{
					"id": "body_alive",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"boxes": [
						{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [64, 80]}
					],
					"submodels": [
						{
							"id": "body_quiver",
							"invertAxis": "xy",
							"translate": [0, 0, 0],
							"texture": "textures/entity/skeleton/quiver.png",
							"boxes": [
								{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [0, 41], "sizeAdd": 0.25}
							],
							"submodels": [
								{
									"id": "quiver_y",
									"invertAxis": "xy",
									"translate": [0, 0, 0],
									"submodels": [
										{
											"id": "quiver",
											"invertAxis": "xy",
											"translate": [0, 18, 4.25],
											"rotate": [0, 0, -35],
											"boxes": [
												{"coordinates": [-2, -6, -1.99, 4, 13, 4], "textureOffset": [24, 48]}
											],
											"submodels": [
												{
													"id": "arrow1",
													"invertAxis": "xy",
													"translate": [1, 8.5, 0.51],
													"rotate": [5, -37.5, -15],
													"submodels": [
														{
															"id": "arrow_part1",
															"invertAxis": "xy",
															"translate": [0, -0.25, 0],
															"boxes": [
																{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
															],
															"submodels": [
																{
																	"id": "arrow_part2",
																	"invertAxis": "xy",
																	"mirrorTexture": "u",
																	"translate": [0, 0, 0],
																	"rotate": [0, -90, 0],
																	"boxes": [
																		{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																	]
																}
															]
														}
													]
												},
												{
													"id": "arrow2",
													"invertAxis": "xy",
													"translate": [0, 8, -0.74],
													"rotate": [-10, -37.5, 2.5],
													"submodels": [
														{
															"id": "arrow_part3",
															"invertAxis": "xy",
															"translate": [0, 0, 0],
															"boxes": [
																{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
															],
															"submodels": [
																{
																	"id": "arrow_part4",
																	"invertAxis": "xy",
																	"mirrorTexture": "u",
																	"translate": [0, 0, 0],
																	"rotate": [0, -90, 0],
																	"boxes": [
																		{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																	]
																}
															]
														}
													]
												},
												{
													"id": "arrow3",
													"invertAxis": "xy",
													"translate": [-0.75, 9, 0.76],
													"rotate": [2.5, -40, 2.5],
													"submodels": [
														{
															"id": "arrow_part5",
															"invertAxis": "xy",
															"translate": [0, 0, 0],
															"boxes": [
																{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
															],
															"submodels": [
																{
																	"id": "arrow_part6",
																	"invertAxis": "xy",
																	"mirrorTexture": "u",
																	"translate": [0, 0, 0],
																	"rotate": [0, -90, 0],
																	"boxes": [
																		{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"id": "body_dead",
					"invertAxis": "xy",
					"translate": [0, 24, 0],
					"submodels": [
						{
							"id": "rotate",
							"invertAxis": "xy",
							"translate": [0, -24, 0],
							"submodels": [
								{
									"id": "translate",
									"invertAxis": "xy",
									"translate": [0, 0, 0],
									"submodels": [
										{
											"id": "physics_body",
											"invertAxis": "xy",
											"translate": [0, 18, 0],
											"boxes": [
												{"coordinates": [-4, -6, -2, 8, 12, 4], "textureOffset": [64, 80]}
											],
											"submodels": [
												{
													"id": "physics_quiver",
													"invertAxis": "xy",
													"translate": [0, -18, 0],
													"texture": "textures/entity/skeleton/quiver.png",
													"boxes": [
														{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [0, 41], "sizeAdd": 0.25}
													],
													"submodels": [
														{
															"id": "quiver_p",
															"invertAxis": "xy",
															"translate": [0, 18, 4.25],
															"rotate": [0, 0, -35],
															"boxes": [
																{"coordinates": [-2, -6, -1.99, 4, 13, 4], "textureOffset": [24, 48]}
															],
															"submodels": [
																{
																	"id": "arrow4",
																	"invertAxis": "xy",
																	"translate": [1, 8.5, 0.51],
																	"rotate": [5, -37.5, -15],
																	"submodels": [
																		{
																			"id": "arrow_part7",
																			"invertAxis": "xy",
																			"translate": [0, -0.25, 0],
																			"boxes": [
																				{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																			],
																			"submodels": [
																				{
																					"id": "arrow_part8",
																					"invertAxis": "xy",
																					"mirrorTexture": "u",
																					"translate": [0, 0, 0],
																					"rotate": [0, -90, 0],
																					"boxes": [
																						{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																					]
																				}
																			]
																		}
																	]
																},
																{
																	"id": "arrow5",
																	"invertAxis": "xy",
																	"translate": [0, 8, -0.74],
																	"rotate": [-10, -37.5, 2.5],
																	"submodels": [
																		{
																			"id": "arrow_part9",
																			"invertAxis": "xy",
																			"translate": [0, 0, 0],
																			"boxes": [
																				{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																			],
																			"submodels": [
																				{
																					"id": "arrow_part10",
																					"invertAxis": "xy",
																					"mirrorTexture": "u",
																					"translate": [0, 0, 0],
																					"rotate": [0, -90, 0],
																					"boxes": [
																						{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																					]
																				}
																			]
																		}
																	]
																},
																{
																	"id": "arrow6",
																	"invertAxis": "xy",
																	"translate": [-0.75, 9, 0.76],
																	"rotate": [2.5, -40, 2.5],
																	"submodels": [
																		{
																			"id": "arrow_part11",
																			"invertAxis": "xy",
																			"translate": [0, 0, 0],
																			"boxes": [
																				{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																			],
																			"submodels": [
																				{
																					"id": "arrow_part12",
																					"invertAxis": "xy",
																					"mirrorTexture": "u",
																					"translate": [0, 0, 0],
																					"rotate": [0, -90, 0],
																					"boxes": [
																						{"coordinates": [-2.5, -3.5, 0, 5, 7, 0], "textureOffset": [40, 48]}
																					]
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												}
											]
										},
										{
											"id": "head2",
											"invertAxis": "xy",
											"translate": [0, 24, 0],
											"submodels": [
												{
													"id": "physics_head",
													"invertAxis": "xy",
													"translate": [0, 4, 0],
													"submodels": [
														{
															"id": "head_piglin2",
															"invertAxis": "xy",
															"translate": [0, -28, 0],
															"boxes": [
																{"coordinates": [-5, 24, -4, 10, 8, 8], "textureOffset": [92, 0]},
																{"coordinates": [-2, 24, -5, 4, 4, 1], "textureOffset": [82, 11]},
																{"coordinates": [-3, 24, -5, 1, 2, 1], "textureOffset": [96, 5]},
																{"coordinates": [2, 24, -5, 1, 2, 1], "textureOffset": [96, 5]},
																{"coordinates": [-5, 24, -4, 10, 8, 8], "textureOffset": [92, 16], "sizeAdd": 0.51}
															],
															"submodels": [
																{
																	"id": "shroom2",
																	"invertAxis": "xy",
																	"translate": [-2, 35.5, 1],
																	"rotate": [0, 45, 0],
																	"boxes": [
																		{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
																	],
																	"submodels": [
																		{
																			"id": "shroom_part2",
																			"invertAxis": "xy",
																			"translate": [0, 0, 0],
																			"rotate": [0, -90, 0],
																			"boxes": [
																				{"coordinates": [-4, -3.5, 0, 8, 7, 0], "textureOffset": [0, 69]}
																			]
																		}
																	]
																}
															]
														}
													]
												}
											]
										},
										{
											"id": "left_arm2",
											"invertAxis": "xy",
											"mirrorTexture": "u",
											"translate": [-5, 22, 0],
											"submodels": [
												{
													"id": "physics_left_arm",
													"invertAxis": "xy",
													"mirrorTexture": "u",
													"translate": [0, -4, 0],
													"boxes": [
														{"coordinates": [-3, -6, -2, 4, 12, 4], "textureOffset": [72, 64]}
													]
												}
											]
										},
										{
											"id": "right_arm2",
											"invertAxis": "xy",
											"translate": [5, 22, 0],
											"submodels": [
												{
													"id": "physics_right_arm",
													"invertAxis": "xy",
													"translate": [0, -4, 0],
													"boxes": [
														{"coordinates": [-1, -6, -2, 4, 12, 4], "textureOffset": [72, 64]}
													]
												}
											]
										},
										{
											"id": "left_leg2",
											"invertAxis": "xy",
											"mirrorTexture": "u",
											"translate": [-2, 12, 0.1],
											"submodels": [
												{
													"id": "physics_left_leg",
													"invertAxis": "xy",
													"translate": [0, -6, -0.1],
													"boxes": [
														{"coordinates": [-2, -6, -2, 4, 12, 4], "textureOffset": [16, 70]}
													]
												}
											]
										},
										{
											"id": "right_leg2",
											"invertAxis": "xy",
											"translate": [2, 12, 0.1],
											"submodels": [
												{
													"id": "physics_right_leg",
													"invertAxis": "xy",
													"mirrorTexture": "u",
													"translate": [0, -6, -0.1],
													"boxes": [
														{"coordinates": [-2, -6, -2, 4, 12, 4], "textureOffset": [16, 70]}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"mirrorTexture": "u",
			"translate": [5, -22, 0],
			"boxes": [
				{"coordinates": [-8, 12, -2, 4, 12, 4], "textureOffset": [72, 64]}
			]
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [-5, -22, 0],
			"boxes": [
				{"coordinates": [4, 12, -2, 4, 12, 4], "textureOffset": [72, 64]}
			]
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"translate": [2, -12, -0.1],
			"boxes": [
				{"coordinates": [-4, 0, -2, 4, 12, 4], "textureOffset": [16, 70]}
			]
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"mirrorTexture": "u",
			"translate": [-2, -12, -0.1],
			"boxes": [
				{"coordinates": [0, 0, -2, 4, 12, 4], "textureOffset": [16, 70]}
			]
		},
		{
			"part": "headwear",
			"id": "headwear",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"attach": true
		}
	]
}